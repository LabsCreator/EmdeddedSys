
lab10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c24  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a4  08002d30  08002d30  00012d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fd4  08002fd4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002fd4  08002fd4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002fd4  08002fd4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fd4  08002fd4  00012fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fd8  08002fd8  00012fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002fdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  20000070  0800304c  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  0800304c  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007bc2  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000019fb  00000000  00000000  00027c5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007f8  00000000  00000000  00029658  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000750  00000000  00000000  00029e50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016d03  00000000  00000000  0002a5a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000070d9  00000000  00000000  000412a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00080a15  00000000  00000000  0004837c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c8d91  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022bc  00000000  00000000  000c8e0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002d18 	.word	0x08002d18

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002d18 	.word	0x08002d18

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b5b0      	push	{r4, r5, r7, lr}
 800015e:	b090      	sub	sp, #64	; 0x40
 8000160:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 faef 	bl	8000744 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f829 	bl	80001bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 f88d 	bl	8000288 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800016e:	f000 f861 	bl	8000234 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uint32_t SIZE_ONE_PAGE = 0x400; // розмір сторінки 1 Кб, або 1024 байта
 8000172:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000176:	63fb      	str	r3, [r7, #60]	; 0x3c
  	  //uint32_t ADDR_FLASH_PAGE = 0x08000000 + 64 * SIZE_ONE_PAGE; // адреса 64 сторінки 0x0800FC00
  uint32_t ADDR_FLASH_PAGE = 0x08000000 + 31 * SIZE_ONE_PAGE; // адреса 31 сторінки 0x08007C00
 8000178:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800017a:	4613      	mov	r3, r2
 800017c:	015b      	lsls	r3, r3, #5
 800017e:	1a9b      	subs	r3, r3, r2
 8000180:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000184:	63bb      	str	r3, [r7, #56]	; 0x38
  size_t SIZE_uint32 = sizeof(uint32_t); // 32 біта це 4 байти
 8000186:	2304      	movs	r3, #4
 8000188:	637b      	str	r3, [r7, #52]	; 0x34
  	// в одну сторінку розміром 1Кб можна записати 1024/4=256 змінних розміром 4 байти

  int size = 48;
 800018a:	2330      	movs	r3, #48	; 0x30
 800018c:	633b      	str	r3, [r7, #48]	; 0x30
  uint8_t arr[] = "Embedded Systems Laboratory work num 10 created";
 800018e:	4b0a      	ldr	r3, [pc, #40]	; (80001b8 <main+0x5c>)
 8000190:	463c      	mov	r4, r7
 8000192:	461d      	mov	r5, r3
 8000194:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000196:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000198:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800019a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800019c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80001a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Flash_Write_Byte_Array(arr, size);
 80001a4:	463b      	mov	r3, r7
 80001a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80001a8:	4618      	mov	r0, r3
 80001aa:	f000 f8df 	bl	800036c <Flash_Write_Byte_Array>
  Flash_Read_By_Byte(ADDR_FLASH_PAGE, size);
 80001ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80001b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80001b2:	f000 f969 	bl	8000488 <Flash_Read_By_Byte>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001b6:	e7fe      	b.n	80001b6 <main+0x5a>
 80001b8:	08002d30 	.word	0x08002d30

080001bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b090      	sub	sp, #64	; 0x40
 80001c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001c2:	f107 0318 	add.w	r3, r7, #24
 80001c6:	2228      	movs	r2, #40	; 0x28
 80001c8:	2100      	movs	r1, #0
 80001ca:	4618      	mov	r0, r3
 80001cc:	f002 f956 	bl	800247c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d0:	1d3b      	adds	r3, r7, #4
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
 80001d6:	605a      	str	r2, [r3, #4]
 80001d8:	609a      	str	r2, [r3, #8]
 80001da:	60da      	str	r2, [r3, #12]
 80001dc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001de:	2302      	movs	r3, #2
 80001e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001e2:	2301      	movs	r3, #1
 80001e4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001e6:	2310      	movs	r3, #16
 80001e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001ea:	2300      	movs	r3, #0
 80001ec:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ee:	f107 0318 	add.w	r3, r7, #24
 80001f2:	4618      	mov	r0, r3
 80001f4:	f001 f822 	bl	800123c <HAL_RCC_OscConfig>
 80001f8:	4603      	mov	r3, r0
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d001      	beq.n	8000202 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001fe:	f000 f983 	bl	8000508 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000202:	230f      	movs	r3, #15
 8000204:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000206:	2300      	movs	r3, #0
 8000208:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800020a:	2300      	movs	r3, #0
 800020c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800020e:	2300      	movs	r3, #0
 8000210:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000212:	2300      	movs	r3, #0
 8000214:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000216:	1d3b      	adds	r3, r7, #4
 8000218:	2100      	movs	r1, #0
 800021a:	4618      	mov	r0, r3
 800021c:	f001 fa8e 	bl	800173c <HAL_RCC_ClockConfig>
 8000220:	4603      	mov	r3, r0
 8000222:	2b00      	cmp	r3, #0
 8000224:	d001      	beq.n	800022a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000226:	f000 f96f 	bl	8000508 <Error_Handler>
  }
}
 800022a:	bf00      	nop
 800022c:	3740      	adds	r7, #64	; 0x40
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}
	...

08000234 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000238:	4b11      	ldr	r3, [pc, #68]	; (8000280 <MX_USART1_UART_Init+0x4c>)
 800023a:	4a12      	ldr	r2, [pc, #72]	; (8000284 <MX_USART1_UART_Init+0x50>)
 800023c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800023e:	4b10      	ldr	r3, [pc, #64]	; (8000280 <MX_USART1_UART_Init+0x4c>)
 8000240:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000244:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000246:	4b0e      	ldr	r3, [pc, #56]	; (8000280 <MX_USART1_UART_Init+0x4c>)
 8000248:	2200      	movs	r2, #0
 800024a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800024c:	4b0c      	ldr	r3, [pc, #48]	; (8000280 <MX_USART1_UART_Init+0x4c>)
 800024e:	2200      	movs	r2, #0
 8000250:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000252:	4b0b      	ldr	r3, [pc, #44]	; (8000280 <MX_USART1_UART_Init+0x4c>)
 8000254:	2200      	movs	r2, #0
 8000256:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000258:	4b09      	ldr	r3, [pc, #36]	; (8000280 <MX_USART1_UART_Init+0x4c>)
 800025a:	220c      	movs	r2, #12
 800025c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800025e:	4b08      	ldr	r3, [pc, #32]	; (8000280 <MX_USART1_UART_Init+0x4c>)
 8000260:	2200      	movs	r2, #0
 8000262:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000264:	4b06      	ldr	r3, [pc, #24]	; (8000280 <MX_USART1_UART_Init+0x4c>)
 8000266:	2200      	movs	r2, #0
 8000268:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800026a:	4805      	ldr	r0, [pc, #20]	; (8000280 <MX_USART1_UART_Init+0x4c>)
 800026c:	f001 fc02 	bl	8001a74 <HAL_UART_Init>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000276:	f000 f947 	bl	8000508 <Error_Handler>
  }
}
 800027a:	bf00      	nop
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	20000098 	.word	0x20000098
 8000284:	40013800 	.word	0x40013800

08000288 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000288:	b480      	push	{r7}
 800028a:	b083      	sub	sp, #12
 800028c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800028e:	4b08      	ldr	r3, [pc, #32]	; (80002b0 <MX_GPIO_Init+0x28>)
 8000290:	699b      	ldr	r3, [r3, #24]
 8000292:	4a07      	ldr	r2, [pc, #28]	; (80002b0 <MX_GPIO_Init+0x28>)
 8000294:	f043 0304 	orr.w	r3, r3, #4
 8000298:	6193      	str	r3, [r2, #24]
 800029a:	4b05      	ldr	r3, [pc, #20]	; (80002b0 <MX_GPIO_Init+0x28>)
 800029c:	699b      	ldr	r3, [r3, #24]
 800029e:	f003 0304 	and.w	r3, r3, #4
 80002a2:	607b      	str	r3, [r7, #4]
 80002a4:	687b      	ldr	r3, [r7, #4]

}
 80002a6:	bf00      	nop
 80002a8:	370c      	adds	r7, #12
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bc80      	pop	{r7}
 80002ae:	4770      	bx	lr
 80002b0:	40021000 	.word	0x40021000

080002b4 <Flash_Erase_One_Page>:

/* USER CODE BEGIN 4 */
void Flash_Erase_One_Page(uint32_t MYADDR)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b09a      	sub	sp, #104	; 0x68
 80002b8:	af02      	add	r7, sp, #8
 80002ba:	6078      	str	r0, [r7, #4]
	FLASH_EraseInitTypeDef EraseInitStruct; // структура для очищення флеша

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES; // очищення сторінками, FLASH_TYPEERASE_MASSERASE - очищення всього флеша
 80002bc:	2300      	movs	r3, #0
 80002be:	64fb      	str	r3, [r7, #76]	; 0x4c
	EraseInitStruct.PageAddress = MYADDR; // адреса сторінки;
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	657b      	str	r3, [r7, #84]	; 0x54
	EraseInitStruct.NbPages = 1;          // кількість сторінок для очищення
 80002c4:	2301      	movs	r3, #1
 80002c6:	65bb      	str	r3, [r7, #88]	; 0x58
	//EraseInitStruct.Banks = FLASH_BANK_1; // для більш потужник МК ніж STM32F103

	uint32_t page_error = 0; // змінна в яку запишеться адреса сторінки, при невдалому очищенні
 80002c8:	2300      	movs	r3, #0
 80002ca:	64bb      	str	r3, [r7, #72]	; 0x48

	char str[64] = { 0, };
 80002cc:	f107 0308 	add.w	r3, r7, #8
 80002d0:	2240      	movs	r2, #64	; 0x40
 80002d2:	2100      	movs	r1, #0
 80002d4:	4618      	mov	r0, r3
 80002d6:	f002 f8d1 	bl	800247c <memset>

	//////// ОЧИЩЕННЯ Flash-пам'яті ////////
	HAL_FLASH_Unlock(); // розблокування Flash-пам'яті
 80002da:	f000 fcc3 	bl	8000c64 <HAL_FLASH_Unlock>

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &page_error) != HAL_OK)
 80002de:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80002e2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80002e6:	4611      	mov	r1, r2
 80002e8:	4618      	mov	r0, r3
 80002ea:	f000 fdad 	bl	8000e48 <HAL_FLASHEx_Erase>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d017      	beq.n	8000324 <Flash_Erase_One_Page+0x70>
	{
		// сталась помилка при очищенні сторінки
		uint32_t er = HAL_FLASH_GetError();
 80002f4:	f000 fcec 	bl	8000cd0 <HAL_FLASH_GetError>
 80002f8:	65f8      	str	r0, [r7, #92]	; 0x5c
		snprintf(str, 64, "Error Flash_Erase(): %lu\n\r", er);
 80002fa:	f107 0008 	add.w	r0, r7, #8
 80002fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000300:	4a17      	ldr	r2, [pc, #92]	; (8000360 <Flash_Erase_One_Page+0xac>)
 8000302:	2140      	movs	r1, #64	; 0x40
 8000304:	f002 f8c2 	bl	800248c <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 100);
 8000308:	f107 0308 	add.w	r3, r7, #8
 800030c:	4618      	mov	r0, r3
 800030e:	f7ff ff1d 	bl	800014c <strlen>
 8000312:	4603      	mov	r3, r0
 8000314:	b29a      	uxth	r2, r3
 8000316:	f107 0108 	add.w	r1, r7, #8
 800031a:	2364      	movs	r3, #100	; 0x64
 800031c:	4811      	ldr	r0, [pc, #68]	; (8000364 <Flash_Erase_One_Page+0xb0>)
 800031e:	f001 fbf6 	bl	8001b0e <HAL_UART_Transmit>
		while (1)
 8000322:	e7fe      	b.n	8000322 <Flash_Erase_One_Page+0x6e>
		{
		}
	}

	// очищення сторінки виконане успішно
	snprintf(str, 64, "Erase Flash from address 0x%08lX to address 0x%08lX OK\n\r", MYADDR, MYADDR+0x400-1);
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800032a:	f107 0008 	add.w	r0, r7, #8
 800032e:	9300      	str	r3, [sp, #0]
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	4a0d      	ldr	r2, [pc, #52]	; (8000368 <Flash_Erase_One_Page+0xb4>)
 8000334:	2140      	movs	r1, #64	; 0x40
 8000336:	f002 f8a9 	bl	800248c <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 100);
 800033a:	f107 0308 	add.w	r3, r7, #8
 800033e:	4618      	mov	r0, r3
 8000340:	f7ff ff04 	bl	800014c <strlen>
 8000344:	4603      	mov	r3, r0
 8000346:	b29a      	uxth	r2, r3
 8000348:	f107 0108 	add.w	r1, r7, #8
 800034c:	2364      	movs	r3, #100	; 0x64
 800034e:	4805      	ldr	r0, [pc, #20]	; (8000364 <Flash_Erase_One_Page+0xb0>)
 8000350:	f001 fbdd 	bl	8001b0e <HAL_UART_Transmit>

	HAL_FLASH_Lock(); // заблокування Flash-пам'яті
 8000354:	f000 fcac 	bl	8000cb0 <HAL_FLASH_Lock>
}
 8000358:	bf00      	nop
 800035a:	3760      	adds	r7, #96	; 0x60
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}
 8000360:	08002d60 	.word	0x08002d60
 8000364:	20000098 	.word	0x20000098
 8000368:	08002d7c 	.word	0x08002d7c

0800036c <Flash_Write_Byte_Array>:
	return dig64;
}

// запис масиву байтів
void Flash_Write_Byte_Array(uint8_t phraze[], int byteCount)
{
 800036c:	b590      	push	{r4, r7, lr}
 800036e:	b09b      	sub	sp, #108	; 0x6c
 8000370:	af02      	add	r7, sp, #8
 8000372:	6078      	str	r0, [r7, #4]
 8000374:	6039      	str	r1, [r7, #0]
	size_t SIZE_uint32 = sizeof(uint32_t);
 8000376:	2304      	movs	r3, #4
 8000378:	65bb      	str	r3, [r7, #88]	; 0x58
	uint32_t SIZE_ONE_PAGE = 0x400; // розмір сторінки 1 Кб, або 1024 байта
 800037a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800037e:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t ADDR_FLASH_PAGE = 0x08000000 + 31 * SIZE_ONE_PAGE; // адреса 31 сторінки 0x08007C00
 8000380:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000382:	4613      	mov	r3, r2
 8000384:	015b      	lsls	r3, r3, #5
 8000386:	1a9b      	subs	r3, r3, r2
 8000388:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800038c:	653b      	str	r3, [r7, #80]	; 0x50

	HAL_UART_Transmit(&huart1, (uint8_t*)"\n\n\r!!!Erase page 31!!!\n\r", sizeof("\n\n\r!!!Erase page 31!!!\n\r"), 100);
 800038e:	2364      	movs	r3, #100	; 0x64
 8000390:	2219      	movs	r2, #25
 8000392:	4938      	ldr	r1, [pc, #224]	; (8000474 <Flash_Write_Byte_Array+0x108>)
 8000394:	4838      	ldr	r0, [pc, #224]	; (8000478 <Flash_Write_Byte_Array+0x10c>)
 8000396:	f001 fbba 	bl	8001b0e <HAL_UART_Transmit>
	Flash_Erase_One_Page(ADDR_FLASH_PAGE); // очищення 31 сторінки
 800039a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800039c:	f7ff ff8a 	bl	80002b4 <Flash_Erase_One_Page>

	HAL_UART_Transmit(&huart1, (uint8_t*)"\n!!!Write!!!\n\r", sizeof("\n!!!Write!!!\n\r"), 100);
 80003a0:	2364      	movs	r3, #100	; 0x64
 80003a2:	220f      	movs	r2, #15
 80003a4:	4935      	ldr	r1, [pc, #212]	; (800047c <Flash_Write_Byte_Array+0x110>)
 80003a6:	4834      	ldr	r0, [pc, #208]	; (8000478 <Flash_Write_Byte_Array+0x10c>)
 80003a8:	f001 fbb1 	bl	8001b0e <HAL_UART_Transmit>

	for(int i = 0; i < byteCount; i++)
 80003ac:	2300      	movs	r3, #0
 80003ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80003b0:	e057      	b.n	8000462 <Flash_Write_Byte_Array+0xf6>
	{
		char str[64] = { 0, };
 80003b2:	f107 0308 	add.w	r3, r7, #8
 80003b6:	2240      	movs	r2, #64	; 0x40
 80003b8:	2100      	movs	r1, #0
 80003ba:	4618      	mov	r0, r3
 80003bc:	f002 f85e 	bl	800247c <memset>
		uint32_t currentAddress = ADDR_FLASH_PAGE + i * SIZE_uint32;
 80003c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80003c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80003c4:	fb02 f303 	mul.w	r3, r2, r3
 80003c8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80003ca:	4413      	add	r3, r2
 80003cc:	64fb      	str	r3, [r7, #76]	; 0x4c
		HAL_FLASH_Unlock(); // розблокування Flash-пам'яті
 80003ce:	f000 fc49 	bl	8000c64 <HAL_FLASH_Unlock>

		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAddress, phraze[i]) != HAL_OK)
 80003d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80003d4:	687a      	ldr	r2, [r7, #4]
 80003d6:	4413      	add	r3, r2
 80003d8:	781b      	ldrb	r3, [r3, #0]
 80003da:	b2db      	uxtb	r3, r3
 80003dc:	f04f 0400 	mov.w	r4, #0
 80003e0:	461a      	mov	r2, r3
 80003e2:	4623      	mov	r3, r4
 80003e4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80003e6:	2001      	movs	r0, #1
 80003e8:	f000 fbcc 	bl	8000b84 <HAL_FLASH_Program>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d017      	beq.n	8000422 <Flash_Write_Byte_Array+0xb6>
		{
			uint32_t er = HAL_FLASH_GetError();
 80003f2:	f000 fc6d 	bl	8000cd0 <HAL_FLASH_GetError>
 80003f6:	64b8      	str	r0, [r7, #72]	; 0x48
			snprintf(str, 64, "Error Flash_Write(): %lu\n\r", er);
 80003f8:	f107 0008 	add.w	r0, r7, #8
 80003fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80003fe:	4a20      	ldr	r2, [pc, #128]	; (8000480 <Flash_Write_Byte_Array+0x114>)
 8000400:	2140      	movs	r1, #64	; 0x40
 8000402:	f002 f843 	bl	800248c <sniprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 100);
 8000406:	f107 0308 	add.w	r3, r7, #8
 800040a:	4618      	mov	r0, r3
 800040c:	f7ff fe9e 	bl	800014c <strlen>
 8000410:	4603      	mov	r3, r0
 8000412:	b29a      	uxth	r2, r3
 8000414:	f107 0108 	add.w	r1, r7, #8
 8000418:	2364      	movs	r3, #100	; 0x64
 800041a:	4817      	ldr	r0, [pc, #92]	; (8000478 <Flash_Write_Byte_Array+0x10c>)
 800041c:	f001 fb77 	bl	8001b0e <HAL_UART_Transmit>
			while (1)
 8000420:	e7fe      	b.n	8000420 <Flash_Write_Byte_Array+0xb4>
			{
			}
		}

		snprintf(str, 64, "Write char (Hex: 0x%08lX) to address 0x%08lX OK\n\r",  phraze[i], currentAddress);
 8000422:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000424:	687a      	ldr	r2, [r7, #4]
 8000426:	4413      	add	r3, r2
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	461a      	mov	r2, r3
 800042c:	f107 0008 	add.w	r0, r7, #8
 8000430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000432:	9300      	str	r3, [sp, #0]
 8000434:	4613      	mov	r3, r2
 8000436:	4a13      	ldr	r2, [pc, #76]	; (8000484 <Flash_Write_Byte_Array+0x118>)
 8000438:	2140      	movs	r1, #64	; 0x40
 800043a:	f002 f827 	bl	800248c <sniprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 100);
 800043e:	f107 0308 	add.w	r3, r7, #8
 8000442:	4618      	mov	r0, r3
 8000444:	f7ff fe82 	bl	800014c <strlen>
 8000448:	4603      	mov	r3, r0
 800044a:	b29a      	uxth	r2, r3
 800044c:	f107 0108 	add.w	r1, r7, #8
 8000450:	2364      	movs	r3, #100	; 0x64
 8000452:	4809      	ldr	r0, [pc, #36]	; (8000478 <Flash_Write_Byte_Array+0x10c>)
 8000454:	f001 fb5b 	bl	8001b0e <HAL_UART_Transmit>

		HAL_FLASH_Lock(); // заблокування Flash-пам'яті
 8000458:	f000 fc2a 	bl	8000cb0 <HAL_FLASH_Lock>
	for(int i = 0; i < byteCount; i++)
 800045c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800045e:	3301      	adds	r3, #1
 8000460:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000462:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000464:	683b      	ldr	r3, [r7, #0]
 8000466:	429a      	cmp	r2, r3
 8000468:	dba3      	blt.n	80003b2 <Flash_Write_Byte_Array+0x46>
	}
}
 800046a:	bf00      	nop
 800046c:	3764      	adds	r7, #100	; 0x64
 800046e:	46bd      	mov	sp, r7
 8000470:	bd90      	pop	{r4, r7, pc}
 8000472:	bf00      	nop
 8000474:	08002f10 	.word	0x08002f10
 8000478:	20000098 	.word	0x20000098
 800047c:	08002f2c 	.word	0x08002f2c
 8000480:	08002db8 	.word	0x08002db8
 8000484:	08002f3c 	.word	0x08002f3c

08000488 <Flash_Read_By_Byte>:

// побайтне зчитування
void Flash_Read_By_Byte(uint32_t address, int byteCount)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b096      	sub	sp, #88	; 0x58
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
 8000490:	6039      	str	r1, [r7, #0]
	size_t SIZE_uint32 = sizeof(uint32_t);
 8000492:	2304      	movs	r3, #4
 8000494:	653b      	str	r3, [r7, #80]	; 0x50
	char str[64] = { 0, };
 8000496:	f107 0308 	add.w	r3, r7, #8
 800049a:	2240      	movs	r2, #64	; 0x40
 800049c:	2100      	movs	r1, #0
 800049e:	4618      	mov	r0, r3
 80004a0:	f001 ffec 	bl	800247c <memset>

	for(int i = 0; i < byteCount; i++)
 80004a4:	2300      	movs	r3, #0
 80004a6:	657b      	str	r3, [r7, #84]	; 0x54
 80004a8:	e022      	b.n	80004f0 <Flash_Read_By_Byte+0x68>
	{
		uint32_t currentAddress = address + i * SIZE_uint32;
 80004aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80004ac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80004ae:	fb02 f303 	mul.w	r3, r2, r3
 80004b2:	687a      	ldr	r2, [r7, #4]
 80004b4:	4413      	add	r3, r2
 80004b6:	64fb      	str	r3, [r7, #76]	; 0x4c
		uint16_t value = *(uint16_t*) currentAddress;
 80004b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80004ba:	881b      	ldrh	r3, [r3, #0]
 80004bc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

		sprintf(str, "%c", value);
 80004c0:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80004c4:	f107 0308 	add.w	r3, r7, #8
 80004c8:	490d      	ldr	r1, [pc, #52]	; (8000500 <Flash_Read_By_Byte+0x78>)
 80004ca:	4618      	mov	r0, r3
 80004cc:	f002 f812 	bl	80024f4 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str), 100);
 80004d0:	f107 0308 	add.w	r3, r7, #8
 80004d4:	4618      	mov	r0, r3
 80004d6:	f7ff fe39 	bl	800014c <strlen>
 80004da:	4603      	mov	r3, r0
 80004dc:	b29a      	uxth	r2, r3
 80004de:	f107 0108 	add.w	r1, r7, #8
 80004e2:	2364      	movs	r3, #100	; 0x64
 80004e4:	4807      	ldr	r0, [pc, #28]	; (8000504 <Flash_Read_By_Byte+0x7c>)
 80004e6:	f001 fb12 	bl	8001b0e <HAL_UART_Transmit>
	for(int i = 0; i < byteCount; i++)
 80004ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80004ec:	3301      	adds	r3, #1
 80004ee:	657b      	str	r3, [r7, #84]	; 0x54
 80004f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	429a      	cmp	r2, r3
 80004f6:	dbd8      	blt.n	80004aa <Flash_Read_By_Byte+0x22>
	}

}
 80004f8:	bf00      	nop
 80004fa:	3758      	adds	r7, #88	; 0x58
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	08002f70 	.word	0x08002f70
 8000504:	20000098 	.word	0x20000098

08000508 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800050c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800050e:	e7fe      	b.n	800050e <Error_Handler+0x6>

08000510 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000516:	4b15      	ldr	r3, [pc, #84]	; (800056c <HAL_MspInit+0x5c>)
 8000518:	699b      	ldr	r3, [r3, #24]
 800051a:	4a14      	ldr	r2, [pc, #80]	; (800056c <HAL_MspInit+0x5c>)
 800051c:	f043 0301 	orr.w	r3, r3, #1
 8000520:	6193      	str	r3, [r2, #24]
 8000522:	4b12      	ldr	r3, [pc, #72]	; (800056c <HAL_MspInit+0x5c>)
 8000524:	699b      	ldr	r3, [r3, #24]
 8000526:	f003 0301 	and.w	r3, r3, #1
 800052a:	60bb      	str	r3, [r7, #8]
 800052c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800052e:	4b0f      	ldr	r3, [pc, #60]	; (800056c <HAL_MspInit+0x5c>)
 8000530:	69db      	ldr	r3, [r3, #28]
 8000532:	4a0e      	ldr	r2, [pc, #56]	; (800056c <HAL_MspInit+0x5c>)
 8000534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000538:	61d3      	str	r3, [r2, #28]
 800053a:	4b0c      	ldr	r3, [pc, #48]	; (800056c <HAL_MspInit+0x5c>)
 800053c:	69db      	ldr	r3, [r3, #28]
 800053e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000546:	4b0a      	ldr	r3, [pc, #40]	; (8000570 <HAL_MspInit+0x60>)
 8000548:	685b      	ldr	r3, [r3, #4]
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	4a04      	ldr	r2, [pc, #16]	; (8000570 <HAL_MspInit+0x60>)
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000562:	bf00      	nop
 8000564:	3714      	adds	r7, #20
 8000566:	46bd      	mov	sp, r7
 8000568:	bc80      	pop	{r7}
 800056a:	4770      	bx	lr
 800056c:	40021000 	.word	0x40021000
 8000570:	40010000 	.word	0x40010000

08000574 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b088      	sub	sp, #32
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057c:	f107 0310 	add.w	r3, r7, #16
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4a20      	ldr	r2, [pc, #128]	; (8000610 <HAL_UART_MspInit+0x9c>)
 8000590:	4293      	cmp	r3, r2
 8000592:	d139      	bne.n	8000608 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000594:	4b1f      	ldr	r3, [pc, #124]	; (8000614 <HAL_UART_MspInit+0xa0>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	4a1e      	ldr	r2, [pc, #120]	; (8000614 <HAL_UART_MspInit+0xa0>)
 800059a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800059e:	6193      	str	r3, [r2, #24]
 80005a0:	4b1c      	ldr	r3, [pc, #112]	; (8000614 <HAL_UART_MspInit+0xa0>)
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005a8:	60fb      	str	r3, [r7, #12]
 80005aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ac:	4b19      	ldr	r3, [pc, #100]	; (8000614 <HAL_UART_MspInit+0xa0>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	4a18      	ldr	r2, [pc, #96]	; (8000614 <HAL_UART_MspInit+0xa0>)
 80005b2:	f043 0304 	orr.w	r3, r3, #4
 80005b6:	6193      	str	r3, [r2, #24]
 80005b8:	4b16      	ldr	r3, [pc, #88]	; (8000614 <HAL_UART_MspInit+0xa0>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	f003 0304 	and.w	r3, r3, #4
 80005c0:	60bb      	str	r3, [r7, #8]
 80005c2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ca:	2302      	movs	r3, #2
 80005cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ce:	2303      	movs	r3, #3
 80005d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d2:	f107 0310 	add.w	r3, r7, #16
 80005d6:	4619      	mov	r1, r3
 80005d8:	480f      	ldr	r0, [pc, #60]	; (8000618 <HAL_UART_MspInit+0xa4>)
 80005da:	f000 fcdd 	bl	8000f98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005e4:	2300      	movs	r3, #0
 80005e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e8:	2300      	movs	r3, #0
 80005ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ec:	f107 0310 	add.w	r3, r7, #16
 80005f0:	4619      	mov	r1, r3
 80005f2:	4809      	ldr	r0, [pc, #36]	; (8000618 <HAL_UART_MspInit+0xa4>)
 80005f4:	f000 fcd0 	bl	8000f98 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80005f8:	2200      	movs	r2, #0
 80005fa:	2100      	movs	r1, #0
 80005fc:	2025      	movs	r0, #37	; 0x25
 80005fe:	f000 f9da 	bl	80009b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000602:	2025      	movs	r0, #37	; 0x25
 8000604:	f000 f9f3 	bl	80009ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000608:	bf00      	nop
 800060a:	3720      	adds	r7, #32
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	40013800 	.word	0x40013800
 8000614:	40021000 	.word	0x40021000
 8000618:	40010800 	.word	0x40010800

0800061c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000620:	e7fe      	b.n	8000620 <NMI_Handler+0x4>

08000622 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000622:	b480      	push	{r7}
 8000624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000626:	e7fe      	b.n	8000626 <HardFault_Handler+0x4>

08000628 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800062c:	e7fe      	b.n	800062c <MemManage_Handler+0x4>

0800062e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800062e:	b480      	push	{r7}
 8000630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000632:	e7fe      	b.n	8000632 <BusFault_Handler+0x4>

08000634 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000638:	e7fe      	b.n	8000638 <UsageFault_Handler+0x4>

0800063a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800063a:	b480      	push	{r7}
 800063c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800063e:	bf00      	nop
 8000640:	46bd      	mov	sp, r7
 8000642:	bc80      	pop	{r7}
 8000644:	4770      	bx	lr

08000646 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000646:	b480      	push	{r7}
 8000648:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800064a:	bf00      	nop
 800064c:	46bd      	mov	sp, r7
 800064e:	bc80      	pop	{r7}
 8000650:	4770      	bx	lr

08000652 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000652:	b480      	push	{r7}
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000656:	bf00      	nop
 8000658:	46bd      	mov	sp, r7
 800065a:	bc80      	pop	{r7}
 800065c:	4770      	bx	lr

0800065e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800065e:	b580      	push	{r7, lr}
 8000660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000662:	f000 f8b5 	bl	80007d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
	...

0800066c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000670:	4802      	ldr	r0, [pc, #8]	; (800067c <USART1_IRQHandler+0x10>)
 8000672:	f001 fadf 	bl	8001c34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20000098 	.word	0x20000098

08000680 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000688:	4a14      	ldr	r2, [pc, #80]	; (80006dc <_sbrk+0x5c>)
 800068a:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <_sbrk+0x60>)
 800068c:	1ad3      	subs	r3, r2, r3
 800068e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000690:	697b      	ldr	r3, [r7, #20]
 8000692:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000694:	4b13      	ldr	r3, [pc, #76]	; (80006e4 <_sbrk+0x64>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d102      	bne.n	80006a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <_sbrk+0x64>)
 800069e:	4a12      	ldr	r2, [pc, #72]	; (80006e8 <_sbrk+0x68>)
 80006a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006a2:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <_sbrk+0x64>)
 80006a4:	681a      	ldr	r2, [r3, #0]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	4413      	add	r3, r2
 80006aa:	693a      	ldr	r2, [r7, #16]
 80006ac:	429a      	cmp	r2, r3
 80006ae:	d207      	bcs.n	80006c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006b0:	f001 feba 	bl	8002428 <__errno>
 80006b4:	4602      	mov	r2, r0
 80006b6:	230c      	movs	r3, #12
 80006b8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80006ba:	f04f 33ff 	mov.w	r3, #4294967295
 80006be:	e009      	b.n	80006d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006c0:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <_sbrk+0x64>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006c6:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <_sbrk+0x64>)
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	4413      	add	r3, r2
 80006ce:	4a05      	ldr	r2, [pc, #20]	; (80006e4 <_sbrk+0x64>)
 80006d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006d2:	68fb      	ldr	r3, [r7, #12]
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3718      	adds	r7, #24
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20002800 	.word	0x20002800
 80006e0:	00000400 	.word	0x00000400
 80006e4:	2000008c 	.word	0x2000008c
 80006e8:	20000108 	.word	0x20000108

080006ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006f0:	bf00      	nop
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr

080006f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006f8:	480c      	ldr	r0, [pc, #48]	; (800072c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006fa:	490d      	ldr	r1, [pc, #52]	; (8000730 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006fc:	4a0d      	ldr	r2, [pc, #52]	; (8000734 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000700:	e002      	b.n	8000708 <LoopCopyDataInit>

08000702 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000702:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000704:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000706:	3304      	adds	r3, #4

08000708 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000708:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800070a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800070c:	d3f9      	bcc.n	8000702 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800070e:	4a0a      	ldr	r2, [pc, #40]	; (8000738 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000710:	4c0a      	ldr	r4, [pc, #40]	; (800073c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000712:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000714:	e001      	b.n	800071a <LoopFillZerobss>

08000716 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000716:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000718:	3204      	adds	r2, #4

0800071a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800071a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800071c:	d3fb      	bcc.n	8000716 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800071e:	f7ff ffe5 	bl	80006ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000722:	f001 fe87 	bl	8002434 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000726:	f7ff fd19 	bl	800015c <main>
  bx lr
 800072a:	4770      	bx	lr
  ldr r0, =_sdata
 800072c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000730:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000734:	08002fdc 	.word	0x08002fdc
  ldr r2, =_sbss
 8000738:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800073c:	20000104 	.word	0x20000104

08000740 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000740:	e7fe      	b.n	8000740 <ADC1_2_IRQHandler>
	...

08000744 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000748:	4b08      	ldr	r3, [pc, #32]	; (800076c <HAL_Init+0x28>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a07      	ldr	r2, [pc, #28]	; (800076c <HAL_Init+0x28>)
 800074e:	f043 0310 	orr.w	r3, r3, #16
 8000752:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000754:	2003      	movs	r0, #3
 8000756:	f000 f923 	bl	80009a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800075a:	200f      	movs	r0, #15
 800075c:	f000 f808 	bl	8000770 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000760:	f7ff fed6 	bl	8000510 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000764:	2300      	movs	r3, #0
}
 8000766:	4618      	mov	r0, r3
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40022000 	.word	0x40022000

08000770 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000778:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <HAL_InitTick+0x54>)
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <HAL_InitTick+0x58>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	4619      	mov	r1, r3
 8000782:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000786:	fbb3 f3f1 	udiv	r3, r3, r1
 800078a:	fbb2 f3f3 	udiv	r3, r2, r3
 800078e:	4618      	mov	r0, r3
 8000790:	f000 f93b 	bl	8000a0a <HAL_SYSTICK_Config>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800079a:	2301      	movs	r3, #1
 800079c:	e00e      	b.n	80007bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	2b0f      	cmp	r3, #15
 80007a2:	d80a      	bhi.n	80007ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007a4:	2200      	movs	r2, #0
 80007a6:	6879      	ldr	r1, [r7, #4]
 80007a8:	f04f 30ff 	mov.w	r0, #4294967295
 80007ac:	f000 f903 	bl	80009b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007b0:	4a06      	ldr	r2, [pc, #24]	; (80007cc <HAL_InitTick+0x5c>)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007b6:	2300      	movs	r3, #0
 80007b8:	e000      	b.n	80007bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007ba:	2301      	movs	r3, #1
}
 80007bc:	4618      	mov	r0, r3
 80007be:	3708      	adds	r7, #8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000000 	.word	0x20000000
 80007c8:	20000008 	.word	0x20000008
 80007cc:	20000004 	.word	0x20000004

080007d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007d4:	4b05      	ldr	r3, [pc, #20]	; (80007ec <HAL_IncTick+0x1c>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	461a      	mov	r2, r3
 80007da:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <HAL_IncTick+0x20>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4413      	add	r3, r2
 80007e0:	4a03      	ldr	r2, [pc, #12]	; (80007f0 <HAL_IncTick+0x20>)
 80007e2:	6013      	str	r3, [r2, #0]
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bc80      	pop	{r7}
 80007ea:	4770      	bx	lr
 80007ec:	20000008 	.word	0x20000008
 80007f0:	200000dc 	.word	0x200000dc

080007f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  return uwTick;
 80007f8:	4b02      	ldr	r3, [pc, #8]	; (8000804 <HAL_GetTick+0x10>)
 80007fa:	681b      	ldr	r3, [r3, #0]
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	46bd      	mov	sp, r7
 8000800:	bc80      	pop	{r7}
 8000802:	4770      	bx	lr
 8000804:	200000dc 	.word	0x200000dc

08000808 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000808:	b480      	push	{r7}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	f003 0307 	and.w	r3, r3, #7
 8000816:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000818:	4b0c      	ldr	r3, [pc, #48]	; (800084c <__NVIC_SetPriorityGrouping+0x44>)
 800081a:	68db      	ldr	r3, [r3, #12]
 800081c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800081e:	68ba      	ldr	r2, [r7, #8]
 8000820:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000824:	4013      	ands	r3, r2
 8000826:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000830:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000834:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000838:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800083a:	4a04      	ldr	r2, [pc, #16]	; (800084c <__NVIC_SetPriorityGrouping+0x44>)
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	60d3      	str	r3, [r2, #12]
}
 8000840:	bf00      	nop
 8000842:	3714      	adds	r7, #20
 8000844:	46bd      	mov	sp, r7
 8000846:	bc80      	pop	{r7}
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	e000ed00 	.word	0xe000ed00

08000850 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000854:	4b04      	ldr	r3, [pc, #16]	; (8000868 <__NVIC_GetPriorityGrouping+0x18>)
 8000856:	68db      	ldr	r3, [r3, #12]
 8000858:	0a1b      	lsrs	r3, r3, #8
 800085a:	f003 0307 	and.w	r3, r3, #7
}
 800085e:	4618      	mov	r0, r3
 8000860:	46bd      	mov	sp, r7
 8000862:	bc80      	pop	{r7}
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	e000ed00 	.word	0xe000ed00

0800086c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087a:	2b00      	cmp	r3, #0
 800087c:	db0b      	blt.n	8000896 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	f003 021f 	and.w	r2, r3, #31
 8000884:	4906      	ldr	r1, [pc, #24]	; (80008a0 <__NVIC_EnableIRQ+0x34>)
 8000886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088a:	095b      	lsrs	r3, r3, #5
 800088c:	2001      	movs	r0, #1
 800088e:	fa00 f202 	lsl.w	r2, r0, r2
 8000892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000896:	bf00      	nop
 8000898:	370c      	adds	r7, #12
 800089a:	46bd      	mov	sp, r7
 800089c:	bc80      	pop	{r7}
 800089e:	4770      	bx	lr
 80008a0:	e000e100 	.word	0xe000e100

080008a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	6039      	str	r1, [r7, #0]
 80008ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	db0a      	blt.n	80008ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	b2da      	uxtb	r2, r3
 80008bc:	490c      	ldr	r1, [pc, #48]	; (80008f0 <__NVIC_SetPriority+0x4c>)
 80008be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c2:	0112      	lsls	r2, r2, #4
 80008c4:	b2d2      	uxtb	r2, r2
 80008c6:	440b      	add	r3, r1
 80008c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008cc:	e00a      	b.n	80008e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	b2da      	uxtb	r2, r3
 80008d2:	4908      	ldr	r1, [pc, #32]	; (80008f4 <__NVIC_SetPriority+0x50>)
 80008d4:	79fb      	ldrb	r3, [r7, #7]
 80008d6:	f003 030f 	and.w	r3, r3, #15
 80008da:	3b04      	subs	r3, #4
 80008dc:	0112      	lsls	r2, r2, #4
 80008de:	b2d2      	uxtb	r2, r2
 80008e0:	440b      	add	r3, r1
 80008e2:	761a      	strb	r2, [r3, #24]
}
 80008e4:	bf00      	nop
 80008e6:	370c      	adds	r7, #12
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bc80      	pop	{r7}
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	e000e100 	.word	0xe000e100
 80008f4:	e000ed00 	.word	0xe000ed00

080008f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b089      	sub	sp, #36	; 0x24
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	60f8      	str	r0, [r7, #12]
 8000900:	60b9      	str	r1, [r7, #8]
 8000902:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	f003 0307 	and.w	r3, r3, #7
 800090a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800090c:	69fb      	ldr	r3, [r7, #28]
 800090e:	f1c3 0307 	rsb	r3, r3, #7
 8000912:	2b04      	cmp	r3, #4
 8000914:	bf28      	it	cs
 8000916:	2304      	movcs	r3, #4
 8000918:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800091a:	69fb      	ldr	r3, [r7, #28]
 800091c:	3304      	adds	r3, #4
 800091e:	2b06      	cmp	r3, #6
 8000920:	d902      	bls.n	8000928 <NVIC_EncodePriority+0x30>
 8000922:	69fb      	ldr	r3, [r7, #28]
 8000924:	3b03      	subs	r3, #3
 8000926:	e000      	b.n	800092a <NVIC_EncodePriority+0x32>
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800092c:	f04f 32ff 	mov.w	r2, #4294967295
 8000930:	69bb      	ldr	r3, [r7, #24]
 8000932:	fa02 f303 	lsl.w	r3, r2, r3
 8000936:	43da      	mvns	r2, r3
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	401a      	ands	r2, r3
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000940:	f04f 31ff 	mov.w	r1, #4294967295
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	fa01 f303 	lsl.w	r3, r1, r3
 800094a:	43d9      	mvns	r1, r3
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000950:	4313      	orrs	r3, r2
         );
}
 8000952:	4618      	mov	r0, r3
 8000954:	3724      	adds	r7, #36	; 0x24
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr

0800095c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	3b01      	subs	r3, #1
 8000968:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800096c:	d301      	bcc.n	8000972 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800096e:	2301      	movs	r3, #1
 8000970:	e00f      	b.n	8000992 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000972:	4a0a      	ldr	r2, [pc, #40]	; (800099c <SysTick_Config+0x40>)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	3b01      	subs	r3, #1
 8000978:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800097a:	210f      	movs	r1, #15
 800097c:	f04f 30ff 	mov.w	r0, #4294967295
 8000980:	f7ff ff90 	bl	80008a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000984:	4b05      	ldr	r3, [pc, #20]	; (800099c <SysTick_Config+0x40>)
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800098a:	4b04      	ldr	r3, [pc, #16]	; (800099c <SysTick_Config+0x40>)
 800098c:	2207      	movs	r2, #7
 800098e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000990:	2300      	movs	r3, #0
}
 8000992:	4618      	mov	r0, r3
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	e000e010 	.word	0xe000e010

080009a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009a8:	6878      	ldr	r0, [r7, #4]
 80009aa:	f7ff ff2d 	bl	8000808 <__NVIC_SetPriorityGrouping>
}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009b6:	b580      	push	{r7, lr}
 80009b8:	b086      	sub	sp, #24
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	4603      	mov	r3, r0
 80009be:	60b9      	str	r1, [r7, #8]
 80009c0:	607a      	str	r2, [r7, #4]
 80009c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009c4:	2300      	movs	r3, #0
 80009c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009c8:	f7ff ff42 	bl	8000850 <__NVIC_GetPriorityGrouping>
 80009cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009ce:	687a      	ldr	r2, [r7, #4]
 80009d0:	68b9      	ldr	r1, [r7, #8]
 80009d2:	6978      	ldr	r0, [r7, #20]
 80009d4:	f7ff ff90 	bl	80008f8 <NVIC_EncodePriority>
 80009d8:	4602      	mov	r2, r0
 80009da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009de:	4611      	mov	r1, r2
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff ff5f 	bl	80008a4 <__NVIC_SetPriority>
}
 80009e6:	bf00      	nop
 80009e8:	3718      	adds	r7, #24
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}

080009ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ee:	b580      	push	{r7, lr}
 80009f0:	b082      	sub	sp, #8
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	4603      	mov	r3, r0
 80009f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff ff35 	bl	800086c <__NVIC_EnableIRQ>
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b082      	sub	sp, #8
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a12:	6878      	ldr	r0, [r7, #4]
 8000a14:	f7ff ffa2 	bl	800095c <SysTick_Config>
 8000a18:	4603      	mov	r3, r0
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000a22:	b480      	push	{r7}
 8000a24:	b085      	sub	sp, #20
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a34:	2b02      	cmp	r3, #2
 8000a36:	d008      	beq.n	8000a4a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2204      	movs	r2, #4
 8000a3c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	2200      	movs	r2, #0
 8000a42:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000a46:	2301      	movs	r3, #1
 8000a48:	e020      	b.n	8000a8c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f022 020e 	bic.w	r2, r2, #14
 8000a58:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f022 0201 	bic.w	r2, r2, #1
 8000a68:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a72:	2101      	movs	r1, #1
 8000a74:	fa01 f202 	lsl.w	r2, r1, r2
 8000a78:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2200      	movs	r2, #0
 8000a86:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3714      	adds	r7, #20
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bc80      	pop	{r7}
 8000a94:	4770      	bx	lr
	...

08000a98 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000aaa:	2b02      	cmp	r3, #2
 8000aac:	d005      	beq.n	8000aba <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2204      	movs	r2, #4
 8000ab2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	73fb      	strb	r3, [r7, #15]
 8000ab8:	e051      	b.n	8000b5e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f022 020e 	bic.w	r2, r2, #14
 8000ac8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f022 0201 	bic.w	r2, r2, #1
 8000ad8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a22      	ldr	r2, [pc, #136]	; (8000b68 <HAL_DMA_Abort_IT+0xd0>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d029      	beq.n	8000b38 <HAL_DMA_Abort_IT+0xa0>
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a20      	ldr	r2, [pc, #128]	; (8000b6c <HAL_DMA_Abort_IT+0xd4>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d022      	beq.n	8000b34 <HAL_DMA_Abort_IT+0x9c>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a1f      	ldr	r2, [pc, #124]	; (8000b70 <HAL_DMA_Abort_IT+0xd8>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d01a      	beq.n	8000b2e <HAL_DMA_Abort_IT+0x96>
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a1d      	ldr	r2, [pc, #116]	; (8000b74 <HAL_DMA_Abort_IT+0xdc>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d012      	beq.n	8000b28 <HAL_DMA_Abort_IT+0x90>
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a1c      	ldr	r2, [pc, #112]	; (8000b78 <HAL_DMA_Abort_IT+0xe0>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d00a      	beq.n	8000b22 <HAL_DMA_Abort_IT+0x8a>
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a1a      	ldr	r2, [pc, #104]	; (8000b7c <HAL_DMA_Abort_IT+0xe4>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d102      	bne.n	8000b1c <HAL_DMA_Abort_IT+0x84>
 8000b16:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000b1a:	e00e      	b.n	8000b3a <HAL_DMA_Abort_IT+0xa2>
 8000b1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b20:	e00b      	b.n	8000b3a <HAL_DMA_Abort_IT+0xa2>
 8000b22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b26:	e008      	b.n	8000b3a <HAL_DMA_Abort_IT+0xa2>
 8000b28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b2c:	e005      	b.n	8000b3a <HAL_DMA_Abort_IT+0xa2>
 8000b2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b32:	e002      	b.n	8000b3a <HAL_DMA_Abort_IT+0xa2>
 8000b34:	2310      	movs	r3, #16
 8000b36:	e000      	b.n	8000b3a <HAL_DMA_Abort_IT+0xa2>
 8000b38:	2301      	movs	r3, #1
 8000b3a:	4a11      	ldr	r2, [pc, #68]	; (8000b80 <HAL_DMA_Abort_IT+0xe8>)
 8000b3c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	2201      	movs	r2, #1
 8000b42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2200      	movs	r2, #0
 8000b4a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d003      	beq.n	8000b5e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	4798      	blx	r3
    } 
  }
  return status;
 8000b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3710      	adds	r7, #16
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40020008 	.word	0x40020008
 8000b6c:	4002001c 	.word	0x4002001c
 8000b70:	40020030 	.word	0x40020030
 8000b74:	40020044 	.word	0x40020044
 8000b78:	40020058 	.word	0x40020058
 8000b7c:	4002006c 	.word	0x4002006c
 8000b80:	40020000 	.word	0x40020000

08000b84 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b86:	b087      	sub	sp, #28
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000b9e:	4b2f      	ldr	r3, [pc, #188]	; (8000c5c <HAL_FLASH_Program+0xd8>)
 8000ba0:	7e1b      	ldrb	r3, [r3, #24]
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d101      	bne.n	8000baa <HAL_FLASH_Program+0x26>
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	e054      	b.n	8000c54 <HAL_FLASH_Program+0xd0>
 8000baa:	4b2c      	ldr	r3, [pc, #176]	; (8000c5c <HAL_FLASH_Program+0xd8>)
 8000bac:	2201      	movs	r2, #1
 8000bae:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000bb0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000bb4:	f000 f8b2 	bl	8000d1c <FLASH_WaitForLastOperation>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8000bbc:	7dfb      	ldrb	r3, [r7, #23]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d144      	bne.n	8000c4c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d102      	bne.n	8000bce <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	757b      	strb	r3, [r7, #21]
 8000bcc:	e007      	b.n	8000bde <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	2b02      	cmp	r3, #2
 8000bd2:	d102      	bne.n	8000bda <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	757b      	strb	r3, [r7, #21]
 8000bd8:	e001      	b.n	8000bde <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8000bda:	2304      	movs	r3, #4
 8000bdc:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8000bde:	2300      	movs	r3, #0
 8000be0:	75bb      	strb	r3, [r7, #22]
 8000be2:	e02d      	b.n	8000c40 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000be4:	7dbb      	ldrb	r3, [r7, #22]
 8000be6:	005a      	lsls	r2, r3, #1
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	eb02 0c03 	add.w	ip, r2, r3
 8000bee:	7dbb      	ldrb	r3, [r7, #22]
 8000bf0:	0119      	lsls	r1, r3, #4
 8000bf2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000bf6:	f1c1 0620 	rsb	r6, r1, #32
 8000bfa:	f1a1 0020 	sub.w	r0, r1, #32
 8000bfe:	fa22 f401 	lsr.w	r4, r2, r1
 8000c02:	fa03 f606 	lsl.w	r6, r3, r6
 8000c06:	4334      	orrs	r4, r6
 8000c08:	fa23 f000 	lsr.w	r0, r3, r0
 8000c0c:	4304      	orrs	r4, r0
 8000c0e:	fa23 f501 	lsr.w	r5, r3, r1
 8000c12:	b2a3      	uxth	r3, r4
 8000c14:	4619      	mov	r1, r3
 8000c16:	4660      	mov	r0, ip
 8000c18:	f000 f864 	bl	8000ce4 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000c1c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000c20:	f000 f87c 	bl	8000d1c <FLASH_WaitForLastOperation>
 8000c24:	4603      	mov	r3, r0
 8000c26:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000c28:	4b0d      	ldr	r3, [pc, #52]	; (8000c60 <HAL_FLASH_Program+0xdc>)
 8000c2a:	691b      	ldr	r3, [r3, #16]
 8000c2c:	4a0c      	ldr	r2, [pc, #48]	; (8000c60 <HAL_FLASH_Program+0xdc>)
 8000c2e:	f023 0301 	bic.w	r3, r3, #1
 8000c32:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8000c34:	7dfb      	ldrb	r3, [r7, #23]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d107      	bne.n	8000c4a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8000c3a:	7dbb      	ldrb	r3, [r7, #22]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	75bb      	strb	r3, [r7, #22]
 8000c40:	7dba      	ldrb	r2, [r7, #22]
 8000c42:	7d7b      	ldrb	r3, [r7, #21]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d3cd      	bcc.n	8000be4 <HAL_FLASH_Program+0x60>
 8000c48:	e000      	b.n	8000c4c <HAL_FLASH_Program+0xc8>
      {
        break;
 8000c4a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000c4c:	4b03      	ldr	r3, [pc, #12]	; (8000c5c <HAL_FLASH_Program+0xd8>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	761a      	strb	r2, [r3, #24]

  return status;
 8000c52:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	371c      	adds	r7, #28
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c5c:	200000e0 	.word	0x200000e0
 8000c60:	40022000 	.word	0x40022000

08000c64 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000c6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ca4 <HAL_FLASH_Unlock+0x40>)
 8000c70:	691b      	ldr	r3, [r3, #16]
 8000c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d00d      	beq.n	8000c96 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000c7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ca4 <HAL_FLASH_Unlock+0x40>)
 8000c7c:	4a0a      	ldr	r2, [pc, #40]	; (8000ca8 <HAL_FLASH_Unlock+0x44>)
 8000c7e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000c80:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <HAL_FLASH_Unlock+0x40>)
 8000c82:	4a0a      	ldr	r2, [pc, #40]	; (8000cac <HAL_FLASH_Unlock+0x48>)
 8000c84:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000c86:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <HAL_FLASH_Unlock+0x40>)
 8000c88:	691b      	ldr	r3, [r3, #16]
 8000c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
 8000c94:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8000c96:	79fb      	ldrb	r3, [r7, #7]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bc80      	pop	{r7}
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	40022000 	.word	0x40022000
 8000ca8:	45670123 	.word	0x45670123
 8000cac:	cdef89ab 	.word	0xcdef89ab

08000cb0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000cb4:	4b05      	ldr	r3, [pc, #20]	; (8000ccc <HAL_FLASH_Lock+0x1c>)
 8000cb6:	691b      	ldr	r3, [r3, #16]
 8000cb8:	4a04      	ldr	r2, [pc, #16]	; (8000ccc <HAL_FLASH_Lock+0x1c>)
 8000cba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cbe:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bc80      	pop	{r7}
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	40022000 	.word	0x40022000

08000cd0 <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8000cd4:	4b02      	ldr	r3, [pc, #8]	; (8000ce0 <HAL_FLASH_GetError+0x10>)
 8000cd6:	69db      	ldr	r3, [r3, #28]
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bc80      	pop	{r7}
 8000cde:	4770      	bx	lr
 8000ce0:	200000e0 	.word	0x200000e0

08000ce4 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	460b      	mov	r3, r1
 8000cee:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000cf0:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <FLASH_Program_HalfWord+0x30>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000cf6:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <FLASH_Program_HalfWord+0x34>)
 8000cf8:	691b      	ldr	r3, [r3, #16]
 8000cfa:	4a07      	ldr	r2, [pc, #28]	; (8000d18 <FLASH_Program_HalfWord+0x34>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	887a      	ldrh	r2, [r7, #2]
 8000d06:	801a      	strh	r2, [r3, #0]
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bc80      	pop	{r7}
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	200000e0 	.word	0x200000e0
 8000d18:	40022000 	.word	0x40022000

08000d1c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8000d24:	f7ff fd66 	bl	80007f4 <HAL_GetTick>
 8000d28:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000d2a:	e010      	b.n	8000d4e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d32:	d00c      	beq.n	8000d4e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d007      	beq.n	8000d4a <FLASH_WaitForLastOperation+0x2e>
 8000d3a:	f7ff fd5b 	bl	80007f4 <HAL_GetTick>
 8000d3e:	4602      	mov	r2, r0
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	1ad3      	subs	r3, r2, r3
 8000d44:	687a      	ldr	r2, [r7, #4]
 8000d46:	429a      	cmp	r2, r3
 8000d48:	d201      	bcs.n	8000d4e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	e025      	b.n	8000d9a <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000d4e:	4b15      	ldr	r3, [pc, #84]	; (8000da4 <FLASH_WaitForLastOperation+0x88>)
 8000d50:	68db      	ldr	r3, [r3, #12]
 8000d52:	f003 0301 	and.w	r3, r3, #1
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d1e8      	bne.n	8000d2c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000d5a:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <FLASH_WaitForLastOperation+0x88>)
 8000d5c:	68db      	ldr	r3, [r3, #12]
 8000d5e:	f003 0320 	and.w	r3, r3, #32
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d002      	beq.n	8000d6c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000d66:	4b0f      	ldr	r3, [pc, #60]	; (8000da4 <FLASH_WaitForLastOperation+0x88>)
 8000d68:	2220      	movs	r2, #32
 8000d6a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000d6c:	4b0d      	ldr	r3, [pc, #52]	; (8000da4 <FLASH_WaitForLastOperation+0x88>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	f003 0310 	and.w	r3, r3, #16
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d10b      	bne.n	8000d90 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000d78:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <FLASH_WaitForLastOperation+0x88>)
 8000d7a:	69db      	ldr	r3, [r3, #28]
 8000d7c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d105      	bne.n	8000d90 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000d84:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <FLASH_WaitForLastOperation+0x88>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d003      	beq.n	8000d98 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000d90:	f000 f80a 	bl	8000da8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000d94:	2301      	movs	r3, #1
 8000d96:	e000      	b.n	8000d9a <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8000d98:	2300      	movs	r3, #0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3710      	adds	r7, #16
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40022000 	.word	0x40022000

08000da8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8000dae:	2300      	movs	r3, #0
 8000db0:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000db2:	4b23      	ldr	r3, [pc, #140]	; (8000e40 <FLASH_SetErrorCode+0x98>)
 8000db4:	68db      	ldr	r3, [r3, #12]
 8000db6:	f003 0310 	and.w	r3, r3, #16
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d009      	beq.n	8000dd2 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000dbe:	4b21      	ldr	r3, [pc, #132]	; (8000e44 <FLASH_SetErrorCode+0x9c>)
 8000dc0:	69db      	ldr	r3, [r3, #28]
 8000dc2:	f043 0302 	orr.w	r3, r3, #2
 8000dc6:	4a1f      	ldr	r2, [pc, #124]	; (8000e44 <FLASH_SetErrorCode+0x9c>)
 8000dc8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	f043 0310 	orr.w	r3, r3, #16
 8000dd0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000dd2:	4b1b      	ldr	r3, [pc, #108]	; (8000e40 <FLASH_SetErrorCode+0x98>)
 8000dd4:	68db      	ldr	r3, [r3, #12]
 8000dd6:	f003 0304 	and.w	r3, r3, #4
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d009      	beq.n	8000df2 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000dde:	4b19      	ldr	r3, [pc, #100]	; (8000e44 <FLASH_SetErrorCode+0x9c>)
 8000de0:	69db      	ldr	r3, [r3, #28]
 8000de2:	f043 0301 	orr.w	r3, r3, #1
 8000de6:	4a17      	ldr	r2, [pc, #92]	; (8000e44 <FLASH_SetErrorCode+0x9c>)
 8000de8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	f043 0304 	orr.w	r3, r3, #4
 8000df0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8000df2:	4b13      	ldr	r3, [pc, #76]	; (8000e40 <FLASH_SetErrorCode+0x98>)
 8000df4:	69db      	ldr	r3, [r3, #28]
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d00b      	beq.n	8000e16 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8000dfe:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <FLASH_SetErrorCode+0x9c>)
 8000e00:	69db      	ldr	r3, [r3, #28]
 8000e02:	f043 0304 	orr.w	r3, r3, #4
 8000e06:	4a0f      	ldr	r2, [pc, #60]	; (8000e44 <FLASH_SetErrorCode+0x9c>)
 8000e08:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000e0a:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <FLASH_SetErrorCode+0x98>)
 8000e0c:	69db      	ldr	r3, [r3, #28]
 8000e0e:	4a0c      	ldr	r2, [pc, #48]	; (8000e40 <FLASH_SetErrorCode+0x98>)
 8000e10:	f023 0301 	bic.w	r3, r3, #1
 8000e14:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	f240 1201 	movw	r2, #257	; 0x101
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d106      	bne.n	8000e2e <FLASH_SetErrorCode+0x86>
 8000e20:	4b07      	ldr	r3, [pc, #28]	; (8000e40 <FLASH_SetErrorCode+0x98>)
 8000e22:	69db      	ldr	r3, [r3, #28]
 8000e24:	4a06      	ldr	r2, [pc, #24]	; (8000e40 <FLASH_SetErrorCode+0x98>)
 8000e26:	f023 0301 	bic.w	r3, r3, #1
 8000e2a:	61d3      	str	r3, [r2, #28]
}  
 8000e2c:	e002      	b.n	8000e34 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000e2e:	4a04      	ldr	r2, [pc, #16]	; (8000e40 <FLASH_SetErrorCode+0x98>)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	60d3      	str	r3, [r2, #12]
}  
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bc80      	pop	{r7}
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	40022000 	.word	0x40022000
 8000e44:	200000e0 	.word	0x200000e0

08000e48 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8000e56:	2300      	movs	r3, #0
 8000e58:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000e5a:	4b2f      	ldr	r3, [pc, #188]	; (8000f18 <HAL_FLASHEx_Erase+0xd0>)
 8000e5c:	7e1b      	ldrb	r3, [r3, #24]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d101      	bne.n	8000e66 <HAL_FLASHEx_Erase+0x1e>
 8000e62:	2302      	movs	r3, #2
 8000e64:	e053      	b.n	8000f0e <HAL_FLASHEx_Erase+0xc6>
 8000e66:	4b2c      	ldr	r3, [pc, #176]	; (8000f18 <HAL_FLASHEx_Erase+0xd0>)
 8000e68:	2201      	movs	r2, #1
 8000e6a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	d116      	bne.n	8000ea2 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000e74:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000e78:	f7ff ff50 	bl	8000d1c <FLASH_WaitForLastOperation>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d141      	bne.n	8000f06 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8000e82:	2001      	movs	r0, #1
 8000e84:	f000 f84c 	bl	8000f20 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000e88:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000e8c:	f7ff ff46 	bl	8000d1c <FLASH_WaitForLastOperation>
 8000e90:	4603      	mov	r3, r0
 8000e92:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000e94:	4b21      	ldr	r3, [pc, #132]	; (8000f1c <HAL_FLASHEx_Erase+0xd4>)
 8000e96:	691b      	ldr	r3, [r3, #16]
 8000e98:	4a20      	ldr	r2, [pc, #128]	; (8000f1c <HAL_FLASHEx_Erase+0xd4>)
 8000e9a:	f023 0304 	bic.w	r3, r3, #4
 8000e9e:	6113      	str	r3, [r2, #16]
 8000ea0:	e031      	b.n	8000f06 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000ea2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000ea6:	f7ff ff39 	bl	8000d1c <FLASH_WaitForLastOperation>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d12a      	bne.n	8000f06 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb6:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	689b      	ldr	r3, [r3, #8]
 8000ebc:	60bb      	str	r3, [r7, #8]
 8000ebe:	e019      	b.n	8000ef4 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8000ec0:	68b8      	ldr	r0, [r7, #8]
 8000ec2:	f000 f849 	bl	8000f58 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000ec6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000eca:	f7ff ff27 	bl	8000d1c <FLASH_WaitForLastOperation>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000ed2:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <HAL_FLASHEx_Erase+0xd4>)
 8000ed4:	691b      	ldr	r3, [r3, #16]
 8000ed6:	4a11      	ldr	r2, [pc, #68]	; (8000f1c <HAL_FLASHEx_Erase+0xd4>)
 8000ed8:	f023 0302 	bic.w	r3, r3, #2
 8000edc:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8000ede:	7bfb      	ldrb	r3, [r7, #15]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d003      	beq.n	8000eec <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	68ba      	ldr	r2, [r7, #8]
 8000ee8:	601a      	str	r2, [r3, #0]
            break;
 8000eea:	e00c      	b.n	8000f06 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000ef2:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	029a      	lsls	r2, r3, #10
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8000f00:	68ba      	ldr	r2, [r7, #8]
 8000f02:	429a      	cmp	r2, r3
 8000f04:	d3dc      	bcc.n	8000ec0 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000f06:	4b04      	ldr	r3, [pc, #16]	; (8000f18 <HAL_FLASHEx_Erase+0xd0>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	761a      	strb	r2, [r3, #24]

  return status;
 8000f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3710      	adds	r7, #16
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	200000e0 	.word	0x200000e0
 8000f1c:	40022000 	.word	0x40022000

08000f20 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000f28:	4b09      	ldr	r3, [pc, #36]	; (8000f50 <FLASH_MassErase+0x30>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000f2e:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <FLASH_MassErase+0x34>)
 8000f30:	691b      	ldr	r3, [r3, #16]
 8000f32:	4a08      	ldr	r2, [pc, #32]	; (8000f54 <FLASH_MassErase+0x34>)
 8000f34:	f043 0304 	orr.w	r3, r3, #4
 8000f38:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000f3a:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <FLASH_MassErase+0x34>)
 8000f3c:	691b      	ldr	r3, [r3, #16]
 8000f3e:	4a05      	ldr	r2, [pc, #20]	; (8000f54 <FLASH_MassErase+0x34>)
 8000f40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f44:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bc80      	pop	{r7}
 8000f4e:	4770      	bx	lr
 8000f50:	200000e0 	.word	0x200000e0
 8000f54:	40022000 	.word	0x40022000

08000f58 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000f60:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <FLASH_PageErase+0x38>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000f66:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <FLASH_PageErase+0x3c>)
 8000f68:	691b      	ldr	r3, [r3, #16]
 8000f6a:	4a0a      	ldr	r2, [pc, #40]	; (8000f94 <FLASH_PageErase+0x3c>)
 8000f6c:	f043 0302 	orr.w	r3, r3, #2
 8000f70:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8000f72:	4a08      	ldr	r2, [pc, #32]	; (8000f94 <FLASH_PageErase+0x3c>)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <FLASH_PageErase+0x3c>)
 8000f7a:	691b      	ldr	r3, [r3, #16]
 8000f7c:	4a05      	ldr	r2, [pc, #20]	; (8000f94 <FLASH_PageErase+0x3c>)
 8000f7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f82:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8000f84:	bf00      	nop
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bc80      	pop	{r7}
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	200000e0 	.word	0x200000e0
 8000f94:	40022000 	.word	0x40022000

08000f98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b08b      	sub	sp, #44	; 0x2c
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000faa:	e121      	b.n	80011f0 <HAL_GPIO_Init+0x258>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000fac:	2201      	movs	r2, #1
 8000fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	69fa      	ldr	r2, [r7, #28]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	f040 8110 	bne.w	80011ea <HAL_GPIO_Init+0x252>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	2b12      	cmp	r3, #18
 8000fd0:	d034      	beq.n	800103c <HAL_GPIO_Init+0xa4>
 8000fd2:	2b12      	cmp	r3, #18
 8000fd4:	d80d      	bhi.n	8000ff2 <HAL_GPIO_Init+0x5a>
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d02b      	beq.n	8001032 <HAL_GPIO_Init+0x9a>
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d804      	bhi.n	8000fe8 <HAL_GPIO_Init+0x50>
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d031      	beq.n	8001046 <HAL_GPIO_Init+0xae>
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d01c      	beq.n	8001020 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000fe6:	e048      	b.n	800107a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000fe8:	2b03      	cmp	r3, #3
 8000fea:	d043      	beq.n	8001074 <HAL_GPIO_Init+0xdc>
 8000fec:	2b11      	cmp	r3, #17
 8000fee:	d01b      	beq.n	8001028 <HAL_GPIO_Init+0x90>
          break;
 8000ff0:	e043      	b.n	800107a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000ff2:	4a86      	ldr	r2, [pc, #536]	; (800120c <HAL_GPIO_Init+0x274>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d026      	beq.n	8001046 <HAL_GPIO_Init+0xae>
 8000ff8:	4a84      	ldr	r2, [pc, #528]	; (800120c <HAL_GPIO_Init+0x274>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d806      	bhi.n	800100c <HAL_GPIO_Init+0x74>
 8000ffe:	4a84      	ldr	r2, [pc, #528]	; (8001210 <HAL_GPIO_Init+0x278>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d020      	beq.n	8001046 <HAL_GPIO_Init+0xae>
 8001004:	4a83      	ldr	r2, [pc, #524]	; (8001214 <HAL_GPIO_Init+0x27c>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d01d      	beq.n	8001046 <HAL_GPIO_Init+0xae>
          break;
 800100a:	e036      	b.n	800107a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800100c:	4a82      	ldr	r2, [pc, #520]	; (8001218 <HAL_GPIO_Init+0x280>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d019      	beq.n	8001046 <HAL_GPIO_Init+0xae>
 8001012:	4a82      	ldr	r2, [pc, #520]	; (800121c <HAL_GPIO_Init+0x284>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d016      	beq.n	8001046 <HAL_GPIO_Init+0xae>
 8001018:	4a81      	ldr	r2, [pc, #516]	; (8001220 <HAL_GPIO_Init+0x288>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d013      	beq.n	8001046 <HAL_GPIO_Init+0xae>
          break;
 800101e:	e02c      	b.n	800107a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	623b      	str	r3, [r7, #32]
          break;
 8001026:	e028      	b.n	800107a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	3304      	adds	r3, #4
 800102e:	623b      	str	r3, [r7, #32]
          break;
 8001030:	e023      	b.n	800107a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	68db      	ldr	r3, [r3, #12]
 8001036:	3308      	adds	r3, #8
 8001038:	623b      	str	r3, [r7, #32]
          break;
 800103a:	e01e      	b.n	800107a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	330c      	adds	r3, #12
 8001042:	623b      	str	r3, [r7, #32]
          break;
 8001044:	e019      	b.n	800107a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d102      	bne.n	8001054 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800104e:	2304      	movs	r3, #4
 8001050:	623b      	str	r3, [r7, #32]
          break;
 8001052:	e012      	b.n	800107a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d105      	bne.n	8001068 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800105c:	2308      	movs	r3, #8
 800105e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	69fa      	ldr	r2, [r7, #28]
 8001064:	611a      	str	r2, [r3, #16]
          break;
 8001066:	e008      	b.n	800107a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001068:	2308      	movs	r3, #8
 800106a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	69fa      	ldr	r2, [r7, #28]
 8001070:	615a      	str	r2, [r3, #20]
          break;
 8001072:	e002      	b.n	800107a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001074:	2300      	movs	r3, #0
 8001076:	623b      	str	r3, [r7, #32]
          break;
 8001078:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	2bff      	cmp	r3, #255	; 0xff
 800107e:	d801      	bhi.n	8001084 <HAL_GPIO_Init+0xec>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	e001      	b.n	8001088 <HAL_GPIO_Init+0xf0>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3304      	adds	r3, #4
 8001088:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	2bff      	cmp	r3, #255	; 0xff
 800108e:	d802      	bhi.n	8001096 <HAL_GPIO_Init+0xfe>
 8001090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	e002      	b.n	800109c <HAL_GPIO_Init+0x104>
 8001096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001098:	3b08      	subs	r3, #8
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	210f      	movs	r1, #15
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	fa01 f303 	lsl.w	r3, r1, r3
 80010aa:	43db      	mvns	r3, r3
 80010ac:	401a      	ands	r2, r3
 80010ae:	6a39      	ldr	r1, [r7, #32]
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	fa01 f303 	lsl.w	r3, r1, r3
 80010b6:	431a      	orrs	r2, r3
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	f000 8090 	beq.w	80011ea <HAL_GPIO_Init+0x252>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010ca:	4b56      	ldr	r3, [pc, #344]	; (8001224 <HAL_GPIO_Init+0x28c>)
 80010cc:	699b      	ldr	r3, [r3, #24]
 80010ce:	4a55      	ldr	r2, [pc, #340]	; (8001224 <HAL_GPIO_Init+0x28c>)
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	6193      	str	r3, [r2, #24]
 80010d6:	4b53      	ldr	r3, [pc, #332]	; (8001224 <HAL_GPIO_Init+0x28c>)
 80010d8:	699b      	ldr	r3, [r3, #24]
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	60bb      	str	r3, [r7, #8]
 80010e0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010e2:	4a51      	ldr	r2, [pc, #324]	; (8001228 <HAL_GPIO_Init+0x290>)
 80010e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e6:	089b      	lsrs	r3, r3, #2
 80010e8:	3302      	adds	r3, #2
 80010ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ee:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f2:	f003 0303 	and.w	r3, r3, #3
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	220f      	movs	r2, #15
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	43db      	mvns	r3, r3
 8001100:	68fa      	ldr	r2, [r7, #12]
 8001102:	4013      	ands	r3, r2
 8001104:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a48      	ldr	r2, [pc, #288]	; (800122c <HAL_GPIO_Init+0x294>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d00d      	beq.n	800112a <HAL_GPIO_Init+0x192>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a47      	ldr	r2, [pc, #284]	; (8001230 <HAL_GPIO_Init+0x298>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d007      	beq.n	8001126 <HAL_GPIO_Init+0x18e>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a46      	ldr	r2, [pc, #280]	; (8001234 <HAL_GPIO_Init+0x29c>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d101      	bne.n	8001122 <HAL_GPIO_Init+0x18a>
 800111e:	2302      	movs	r3, #2
 8001120:	e004      	b.n	800112c <HAL_GPIO_Init+0x194>
 8001122:	2303      	movs	r3, #3
 8001124:	e002      	b.n	800112c <HAL_GPIO_Init+0x194>
 8001126:	2301      	movs	r3, #1
 8001128:	e000      	b.n	800112c <HAL_GPIO_Init+0x194>
 800112a:	2300      	movs	r3, #0
 800112c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800112e:	f002 0203 	and.w	r2, r2, #3
 8001132:	0092      	lsls	r2, r2, #2
 8001134:	4093      	lsls	r3, r2
 8001136:	68fa      	ldr	r2, [r7, #12]
 8001138:	4313      	orrs	r3, r2
 800113a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800113c:	493a      	ldr	r1, [pc, #232]	; (8001228 <HAL_GPIO_Init+0x290>)
 800113e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001140:	089b      	lsrs	r3, r3, #2
 8001142:	3302      	adds	r3, #2
 8001144:	68fa      	ldr	r2, [r7, #12]
 8001146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d006      	beq.n	8001164 <HAL_GPIO_Init+0x1cc>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001156:	4b38      	ldr	r3, [pc, #224]	; (8001238 <HAL_GPIO_Init+0x2a0>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	4937      	ldr	r1, [pc, #220]	; (8001238 <HAL_GPIO_Init+0x2a0>)
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	4313      	orrs	r3, r2
 8001160:	600b      	str	r3, [r1, #0]
 8001162:	e006      	b.n	8001172 <HAL_GPIO_Init+0x1da>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001164:	4b34      	ldr	r3, [pc, #208]	; (8001238 <HAL_GPIO_Init+0x2a0>)
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	43db      	mvns	r3, r3
 800116c:	4932      	ldr	r1, [pc, #200]	; (8001238 <HAL_GPIO_Init+0x2a0>)
 800116e:	4013      	ands	r3, r2
 8001170:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d006      	beq.n	800118c <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800117e:	4b2e      	ldr	r3, [pc, #184]	; (8001238 <HAL_GPIO_Init+0x2a0>)
 8001180:	685a      	ldr	r2, [r3, #4]
 8001182:	492d      	ldr	r1, [pc, #180]	; (8001238 <HAL_GPIO_Init+0x2a0>)
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	4313      	orrs	r3, r2
 8001188:	604b      	str	r3, [r1, #4]
 800118a:	e006      	b.n	800119a <HAL_GPIO_Init+0x202>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800118c:	4b2a      	ldr	r3, [pc, #168]	; (8001238 <HAL_GPIO_Init+0x2a0>)
 800118e:	685a      	ldr	r2, [r3, #4]
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	43db      	mvns	r3, r3
 8001194:	4928      	ldr	r1, [pc, #160]	; (8001238 <HAL_GPIO_Init+0x2a0>)
 8001196:	4013      	ands	r3, r2
 8001198:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d006      	beq.n	80011b4 <HAL_GPIO_Init+0x21c>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011a6:	4b24      	ldr	r3, [pc, #144]	; (8001238 <HAL_GPIO_Init+0x2a0>)
 80011a8:	689a      	ldr	r2, [r3, #8]
 80011aa:	4923      	ldr	r1, [pc, #140]	; (8001238 <HAL_GPIO_Init+0x2a0>)
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	608b      	str	r3, [r1, #8]
 80011b2:	e006      	b.n	80011c2 <HAL_GPIO_Init+0x22a>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011b4:	4b20      	ldr	r3, [pc, #128]	; (8001238 <HAL_GPIO_Init+0x2a0>)
 80011b6:	689a      	ldr	r2, [r3, #8]
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	43db      	mvns	r3, r3
 80011bc:	491e      	ldr	r1, [pc, #120]	; (8001238 <HAL_GPIO_Init+0x2a0>)
 80011be:	4013      	ands	r3, r2
 80011c0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d006      	beq.n	80011dc <HAL_GPIO_Init+0x244>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011ce:	4b1a      	ldr	r3, [pc, #104]	; (8001238 <HAL_GPIO_Init+0x2a0>)
 80011d0:	68da      	ldr	r2, [r3, #12]
 80011d2:	4919      	ldr	r1, [pc, #100]	; (8001238 <HAL_GPIO_Init+0x2a0>)
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	60cb      	str	r3, [r1, #12]
 80011da:	e006      	b.n	80011ea <HAL_GPIO_Init+0x252>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011dc:	4b16      	ldr	r3, [pc, #88]	; (8001238 <HAL_GPIO_Init+0x2a0>)
 80011de:	68da      	ldr	r2, [r3, #12]
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	43db      	mvns	r3, r3
 80011e4:	4914      	ldr	r1, [pc, #80]	; (8001238 <HAL_GPIO_Init+0x2a0>)
 80011e6:	4013      	ands	r3, r2
 80011e8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80011ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ec:	3301      	adds	r3, #1
 80011ee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f6:	fa22 f303 	lsr.w	r3, r2, r3
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	f47f aed6 	bne.w	8000fac <HAL_GPIO_Init+0x14>
  }
}
 8001200:	bf00      	nop
 8001202:	372c      	adds	r7, #44	; 0x2c
 8001204:	46bd      	mov	sp, r7
 8001206:	bc80      	pop	{r7}
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	10210000 	.word	0x10210000
 8001210:	10110000 	.word	0x10110000
 8001214:	10120000 	.word	0x10120000
 8001218:	10310000 	.word	0x10310000
 800121c:	10320000 	.word	0x10320000
 8001220:	10220000 	.word	0x10220000
 8001224:	40021000 	.word	0x40021000
 8001228:	40010000 	.word	0x40010000
 800122c:	40010800 	.word	0x40010800
 8001230:	40010c00 	.word	0x40010c00
 8001234:	40011000 	.word	0x40011000
 8001238:	40010400 	.word	0x40010400

0800123c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d101      	bne.n	800124e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e26c      	b.n	8001728 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	2b00      	cmp	r3, #0
 8001258:	f000 8087 	beq.w	800136a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800125c:	4b92      	ldr	r3, [pc, #584]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f003 030c 	and.w	r3, r3, #12
 8001264:	2b04      	cmp	r3, #4
 8001266:	d00c      	beq.n	8001282 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001268:	4b8f      	ldr	r3, [pc, #572]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f003 030c 	and.w	r3, r3, #12
 8001270:	2b08      	cmp	r3, #8
 8001272:	d112      	bne.n	800129a <HAL_RCC_OscConfig+0x5e>
 8001274:	4b8c      	ldr	r3, [pc, #560]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800127c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001280:	d10b      	bne.n	800129a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001282:	4b89      	ldr	r3, [pc, #548]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d06c      	beq.n	8001368 <HAL_RCC_OscConfig+0x12c>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d168      	bne.n	8001368 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e246      	b.n	8001728 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012a2:	d106      	bne.n	80012b2 <HAL_RCC_OscConfig+0x76>
 80012a4:	4b80      	ldr	r3, [pc, #512]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a7f      	ldr	r2, [pc, #508]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 80012aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012ae:	6013      	str	r3, [r2, #0]
 80012b0:	e02e      	b.n	8001310 <HAL_RCC_OscConfig+0xd4>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d10c      	bne.n	80012d4 <HAL_RCC_OscConfig+0x98>
 80012ba:	4b7b      	ldr	r3, [pc, #492]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a7a      	ldr	r2, [pc, #488]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 80012c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012c4:	6013      	str	r3, [r2, #0]
 80012c6:	4b78      	ldr	r3, [pc, #480]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a77      	ldr	r2, [pc, #476]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 80012cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012d0:	6013      	str	r3, [r2, #0]
 80012d2:	e01d      	b.n	8001310 <HAL_RCC_OscConfig+0xd4>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012dc:	d10c      	bne.n	80012f8 <HAL_RCC_OscConfig+0xbc>
 80012de:	4b72      	ldr	r3, [pc, #456]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a71      	ldr	r2, [pc, #452]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 80012e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012e8:	6013      	str	r3, [r2, #0]
 80012ea:	4b6f      	ldr	r3, [pc, #444]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a6e      	ldr	r2, [pc, #440]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 80012f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012f4:	6013      	str	r3, [r2, #0]
 80012f6:	e00b      	b.n	8001310 <HAL_RCC_OscConfig+0xd4>
 80012f8:	4b6b      	ldr	r3, [pc, #428]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a6a      	ldr	r2, [pc, #424]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 80012fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001302:	6013      	str	r3, [r2, #0]
 8001304:	4b68      	ldr	r3, [pc, #416]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a67      	ldr	r2, [pc, #412]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 800130a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800130e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d013      	beq.n	8001340 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001318:	f7ff fa6c 	bl	80007f4 <HAL_GetTick>
 800131c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001320:	f7ff fa68 	bl	80007f4 <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b64      	cmp	r3, #100	; 0x64
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e1fa      	b.n	8001728 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001332:	4b5d      	ldr	r3, [pc, #372]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d0f0      	beq.n	8001320 <HAL_RCC_OscConfig+0xe4>
 800133e:	e014      	b.n	800136a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001340:	f7ff fa58 	bl	80007f4 <HAL_GetTick>
 8001344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001348:	f7ff fa54 	bl	80007f4 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b64      	cmp	r3, #100	; 0x64
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e1e6      	b.n	8001728 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800135a:	4b53      	ldr	r3, [pc, #332]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d1f0      	bne.n	8001348 <HAL_RCC_OscConfig+0x10c>
 8001366:	e000      	b.n	800136a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001368:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d063      	beq.n	800143e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001376:	4b4c      	ldr	r3, [pc, #304]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f003 030c 	and.w	r3, r3, #12
 800137e:	2b00      	cmp	r3, #0
 8001380:	d00b      	beq.n	800139a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001382:	4b49      	ldr	r3, [pc, #292]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f003 030c 	and.w	r3, r3, #12
 800138a:	2b08      	cmp	r3, #8
 800138c:	d11c      	bne.n	80013c8 <HAL_RCC_OscConfig+0x18c>
 800138e:	4b46      	ldr	r3, [pc, #280]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d116      	bne.n	80013c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800139a:	4b43      	ldr	r3, [pc, #268]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d005      	beq.n	80013b2 <HAL_RCC_OscConfig+0x176>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	691b      	ldr	r3, [r3, #16]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d001      	beq.n	80013b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e1ba      	b.n	8001728 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b2:	4b3d      	ldr	r3, [pc, #244]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	695b      	ldr	r3, [r3, #20]
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	4939      	ldr	r1, [pc, #228]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 80013c2:	4313      	orrs	r3, r2
 80013c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013c6:	e03a      	b.n	800143e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	691b      	ldr	r3, [r3, #16]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d020      	beq.n	8001412 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013d0:	4b36      	ldr	r3, [pc, #216]	; (80014ac <HAL_RCC_OscConfig+0x270>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d6:	f7ff fa0d 	bl	80007f4 <HAL_GetTick>
 80013da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013dc:	e008      	b.n	80013f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013de:	f7ff fa09 	bl	80007f4 <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d901      	bls.n	80013f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e19b      	b.n	8001728 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013f0:	4b2d      	ldr	r3, [pc, #180]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 0302 	and.w	r3, r3, #2
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d0f0      	beq.n	80013de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013fc:	4b2a      	ldr	r3, [pc, #168]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	695b      	ldr	r3, [r3, #20]
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	4927      	ldr	r1, [pc, #156]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 800140c:	4313      	orrs	r3, r2
 800140e:	600b      	str	r3, [r1, #0]
 8001410:	e015      	b.n	800143e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001412:	4b26      	ldr	r3, [pc, #152]	; (80014ac <HAL_RCC_OscConfig+0x270>)
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001418:	f7ff f9ec 	bl	80007f4 <HAL_GetTick>
 800141c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800141e:	e008      	b.n	8001432 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001420:	f7ff f9e8 	bl	80007f4 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b02      	cmp	r3, #2
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e17a      	b.n	8001728 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001432:	4b1d      	ldr	r3, [pc, #116]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d1f0      	bne.n	8001420 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0308 	and.w	r3, r3, #8
 8001446:	2b00      	cmp	r3, #0
 8001448:	d03a      	beq.n	80014c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	699b      	ldr	r3, [r3, #24]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d019      	beq.n	8001486 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001452:	4b17      	ldr	r3, [pc, #92]	; (80014b0 <HAL_RCC_OscConfig+0x274>)
 8001454:	2201      	movs	r2, #1
 8001456:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001458:	f7ff f9cc 	bl	80007f4 <HAL_GetTick>
 800145c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800145e:	e008      	b.n	8001472 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001460:	f7ff f9c8 	bl	80007f4 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b02      	cmp	r3, #2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e15a      	b.n	8001728 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001472:	4b0d      	ldr	r3, [pc, #52]	; (80014a8 <HAL_RCC_OscConfig+0x26c>)
 8001474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d0f0      	beq.n	8001460 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800147e:	2001      	movs	r0, #1
 8001480:	f000 fada 	bl	8001a38 <RCC_Delay>
 8001484:	e01c      	b.n	80014c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001486:	4b0a      	ldr	r3, [pc, #40]	; (80014b0 <HAL_RCC_OscConfig+0x274>)
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800148c:	f7ff f9b2 	bl	80007f4 <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001492:	e00f      	b.n	80014b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001494:	f7ff f9ae 	bl	80007f4 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d908      	bls.n	80014b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e140      	b.n	8001728 <HAL_RCC_OscConfig+0x4ec>
 80014a6:	bf00      	nop
 80014a8:	40021000 	.word	0x40021000
 80014ac:	42420000 	.word	0x42420000
 80014b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014b4:	4b9e      	ldr	r3, [pc, #632]	; (8001730 <HAL_RCC_OscConfig+0x4f4>)
 80014b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b8:	f003 0302 	and.w	r3, r3, #2
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d1e9      	bne.n	8001494 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0304 	and.w	r3, r3, #4
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	f000 80a6 	beq.w	800161a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014ce:	2300      	movs	r3, #0
 80014d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014d2:	4b97      	ldr	r3, [pc, #604]	; (8001730 <HAL_RCC_OscConfig+0x4f4>)
 80014d4:	69db      	ldr	r3, [r3, #28]
 80014d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d10d      	bne.n	80014fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014de:	4b94      	ldr	r3, [pc, #592]	; (8001730 <HAL_RCC_OscConfig+0x4f4>)
 80014e0:	69db      	ldr	r3, [r3, #28]
 80014e2:	4a93      	ldr	r2, [pc, #588]	; (8001730 <HAL_RCC_OscConfig+0x4f4>)
 80014e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e8:	61d3      	str	r3, [r2, #28]
 80014ea:	4b91      	ldr	r3, [pc, #580]	; (8001730 <HAL_RCC_OscConfig+0x4f4>)
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f2:	60bb      	str	r3, [r7, #8]
 80014f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014f6:	2301      	movs	r3, #1
 80014f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014fa:	4b8e      	ldr	r3, [pc, #568]	; (8001734 <HAL_RCC_OscConfig+0x4f8>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001502:	2b00      	cmp	r3, #0
 8001504:	d118      	bne.n	8001538 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001506:	4b8b      	ldr	r3, [pc, #556]	; (8001734 <HAL_RCC_OscConfig+0x4f8>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a8a      	ldr	r2, [pc, #552]	; (8001734 <HAL_RCC_OscConfig+0x4f8>)
 800150c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001510:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001512:	f7ff f96f 	bl	80007f4 <HAL_GetTick>
 8001516:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001518:	e008      	b.n	800152c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800151a:	f7ff f96b 	bl	80007f4 <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b64      	cmp	r3, #100	; 0x64
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e0fd      	b.n	8001728 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800152c:	4b81      	ldr	r3, [pc, #516]	; (8001734 <HAL_RCC_OscConfig+0x4f8>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001534:	2b00      	cmp	r3, #0
 8001536:	d0f0      	beq.n	800151a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d106      	bne.n	800154e <HAL_RCC_OscConfig+0x312>
 8001540:	4b7b      	ldr	r3, [pc, #492]	; (8001730 <HAL_RCC_OscConfig+0x4f4>)
 8001542:	6a1b      	ldr	r3, [r3, #32]
 8001544:	4a7a      	ldr	r2, [pc, #488]	; (8001730 <HAL_RCC_OscConfig+0x4f4>)
 8001546:	f043 0301 	orr.w	r3, r3, #1
 800154a:	6213      	str	r3, [r2, #32]
 800154c:	e02d      	b.n	80015aa <HAL_RCC_OscConfig+0x36e>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d10c      	bne.n	8001570 <HAL_RCC_OscConfig+0x334>
 8001556:	4b76      	ldr	r3, [pc, #472]	; (8001730 <HAL_RCC_OscConfig+0x4f4>)
 8001558:	6a1b      	ldr	r3, [r3, #32]
 800155a:	4a75      	ldr	r2, [pc, #468]	; (8001730 <HAL_RCC_OscConfig+0x4f4>)
 800155c:	f023 0301 	bic.w	r3, r3, #1
 8001560:	6213      	str	r3, [r2, #32]
 8001562:	4b73      	ldr	r3, [pc, #460]	; (8001730 <HAL_RCC_OscConfig+0x4f4>)
 8001564:	6a1b      	ldr	r3, [r3, #32]
 8001566:	4a72      	ldr	r2, [pc, #456]	; (8001730 <HAL_RCC_OscConfig+0x4f4>)
 8001568:	f023 0304 	bic.w	r3, r3, #4
 800156c:	6213      	str	r3, [r2, #32]
 800156e:	e01c      	b.n	80015aa <HAL_RCC_OscConfig+0x36e>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	2b05      	cmp	r3, #5
 8001576:	d10c      	bne.n	8001592 <HAL_RCC_OscConfig+0x356>
 8001578:	4b6d      	ldr	r3, [pc, #436]	; (8001730 <HAL_RCC_OscConfig+0x4f4>)
 800157a:	6a1b      	ldr	r3, [r3, #32]
 800157c:	4a6c      	ldr	r2, [pc, #432]	; (8001730 <HAL_RCC_OscConfig+0x4f4>)
 800157e:	f043 0304 	orr.w	r3, r3, #4
 8001582:	6213      	str	r3, [r2, #32]
 8001584:	4b6a      	ldr	r3, [pc, #424]	; (8001730 <HAL_RCC_OscConfig+0x4f4>)
 8001586:	6a1b      	ldr	r3, [r3, #32]
 8001588:	4a69      	ldr	r2, [pc, #420]	; (8001730 <HAL_RCC_OscConfig+0x4f4>)
 800158a:	f043 0301 	orr.w	r3, r3, #1
 800158e:	6213      	str	r3, [r2, #32]
 8001590:	e00b      	b.n	80015aa <HAL_RCC_OscConfig+0x36e>
 8001592:	4b67      	ldr	r3, [pc, #412]	; (8001730 <HAL_RCC_OscConfig+0x4f4>)
 8001594:	6a1b      	ldr	r3, [r3, #32]
 8001596:	4a66      	ldr	r2, [pc, #408]	; (8001730 <HAL_RCC_OscConfig+0x4f4>)
 8001598:	f023 0301 	bic.w	r3, r3, #1
 800159c:	6213      	str	r3, [r2, #32]
 800159e:	4b64      	ldr	r3, [pc, #400]	; (8001730 <HAL_RCC_OscConfig+0x4f4>)
 80015a0:	6a1b      	ldr	r3, [r3, #32]
 80015a2:	4a63      	ldr	r2, [pc, #396]	; (8001730 <HAL_RCC_OscConfig+0x4f4>)
 80015a4:	f023 0304 	bic.w	r3, r3, #4
 80015a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d015      	beq.n	80015de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015b2:	f7ff f91f 	bl	80007f4 <HAL_GetTick>
 80015b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015b8:	e00a      	b.n	80015d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ba:	f7ff f91b 	bl	80007f4 <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d901      	bls.n	80015d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e0ab      	b.n	8001728 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015d0:	4b57      	ldr	r3, [pc, #348]	; (8001730 <HAL_RCC_OscConfig+0x4f4>)
 80015d2:	6a1b      	ldr	r3, [r3, #32]
 80015d4:	f003 0302 	and.w	r3, r3, #2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d0ee      	beq.n	80015ba <HAL_RCC_OscConfig+0x37e>
 80015dc:	e014      	b.n	8001608 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015de:	f7ff f909 	bl	80007f4 <HAL_GetTick>
 80015e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015e4:	e00a      	b.n	80015fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015e6:	f7ff f905 	bl	80007f4 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d901      	bls.n	80015fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e095      	b.n	8001728 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015fc:	4b4c      	ldr	r3, [pc, #304]	; (8001730 <HAL_RCC_OscConfig+0x4f4>)
 80015fe:	6a1b      	ldr	r3, [r3, #32]
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d1ee      	bne.n	80015e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001608:	7dfb      	ldrb	r3, [r7, #23]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d105      	bne.n	800161a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800160e:	4b48      	ldr	r3, [pc, #288]	; (8001730 <HAL_RCC_OscConfig+0x4f4>)
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	4a47      	ldr	r2, [pc, #284]	; (8001730 <HAL_RCC_OscConfig+0x4f4>)
 8001614:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001618:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	2b00      	cmp	r3, #0
 8001620:	f000 8081 	beq.w	8001726 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001624:	4b42      	ldr	r3, [pc, #264]	; (8001730 <HAL_RCC_OscConfig+0x4f4>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f003 030c 	and.w	r3, r3, #12
 800162c:	2b08      	cmp	r3, #8
 800162e:	d061      	beq.n	80016f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	69db      	ldr	r3, [r3, #28]
 8001634:	2b02      	cmp	r3, #2
 8001636:	d146      	bne.n	80016c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001638:	4b3f      	ldr	r3, [pc, #252]	; (8001738 <HAL_RCC_OscConfig+0x4fc>)
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163e:	f7ff f8d9 	bl	80007f4 <HAL_GetTick>
 8001642:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001644:	e008      	b.n	8001658 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001646:	f7ff f8d5 	bl	80007f4 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e067      	b.n	8001728 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001658:	4b35      	ldr	r3, [pc, #212]	; (8001730 <HAL_RCC_OscConfig+0x4f4>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1f0      	bne.n	8001646 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a1b      	ldr	r3, [r3, #32]
 8001668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800166c:	d108      	bne.n	8001680 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800166e:	4b30      	ldr	r3, [pc, #192]	; (8001730 <HAL_RCC_OscConfig+0x4f4>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	492d      	ldr	r1, [pc, #180]	; (8001730 <HAL_RCC_OscConfig+0x4f4>)
 800167c:	4313      	orrs	r3, r2
 800167e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001680:	4b2b      	ldr	r3, [pc, #172]	; (8001730 <HAL_RCC_OscConfig+0x4f4>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6a19      	ldr	r1, [r3, #32]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001690:	430b      	orrs	r3, r1
 8001692:	4927      	ldr	r1, [pc, #156]	; (8001730 <HAL_RCC_OscConfig+0x4f4>)
 8001694:	4313      	orrs	r3, r2
 8001696:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001698:	4b27      	ldr	r3, [pc, #156]	; (8001738 <HAL_RCC_OscConfig+0x4fc>)
 800169a:	2201      	movs	r2, #1
 800169c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169e:	f7ff f8a9 	bl	80007f4 <HAL_GetTick>
 80016a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016a4:	e008      	b.n	80016b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016a6:	f7ff f8a5 	bl	80007f4 <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e037      	b.n	8001728 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016b8:	4b1d      	ldr	r3, [pc, #116]	; (8001730 <HAL_RCC_OscConfig+0x4f4>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d0f0      	beq.n	80016a6 <HAL_RCC_OscConfig+0x46a>
 80016c4:	e02f      	b.n	8001726 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016c6:	4b1c      	ldr	r3, [pc, #112]	; (8001738 <HAL_RCC_OscConfig+0x4fc>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016cc:	f7ff f892 	bl	80007f4 <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016d4:	f7ff f88e 	bl	80007f4 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e020      	b.n	8001728 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016e6:	4b12      	ldr	r3, [pc, #72]	; (8001730 <HAL_RCC_OscConfig+0x4f4>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1f0      	bne.n	80016d4 <HAL_RCC_OscConfig+0x498>
 80016f2:	e018      	b.n	8001726 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	69db      	ldr	r3, [r3, #28]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d101      	bne.n	8001700 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e013      	b.n	8001728 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001700:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <HAL_RCC_OscConfig+0x4f4>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a1b      	ldr	r3, [r3, #32]
 8001710:	429a      	cmp	r2, r3
 8001712:	d106      	bne.n	8001722 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800171e:	429a      	cmp	r2, r3
 8001720:	d001      	beq.n	8001726 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e000      	b.n	8001728 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001726:	2300      	movs	r3, #0
}
 8001728:	4618      	mov	r0, r3
 800172a:	3718      	adds	r7, #24
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40021000 	.word	0x40021000
 8001734:	40007000 	.word	0x40007000
 8001738:	42420060 	.word	0x42420060

0800173c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d101      	bne.n	8001750 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e0d0      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001750:	4b6a      	ldr	r3, [pc, #424]	; (80018fc <HAL_RCC_ClockConfig+0x1c0>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0307 	and.w	r3, r3, #7
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	429a      	cmp	r2, r3
 800175c:	d910      	bls.n	8001780 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800175e:	4b67      	ldr	r3, [pc, #412]	; (80018fc <HAL_RCC_ClockConfig+0x1c0>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f023 0207 	bic.w	r2, r3, #7
 8001766:	4965      	ldr	r1, [pc, #404]	; (80018fc <HAL_RCC_ClockConfig+0x1c0>)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	4313      	orrs	r3, r2
 800176c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800176e:	4b63      	ldr	r3, [pc, #396]	; (80018fc <HAL_RCC_ClockConfig+0x1c0>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	429a      	cmp	r2, r3
 800177a:	d001      	beq.n	8001780 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e0b8      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d020      	beq.n	80017ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0304 	and.w	r3, r3, #4
 8001794:	2b00      	cmp	r3, #0
 8001796:	d005      	beq.n	80017a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001798:	4b59      	ldr	r3, [pc, #356]	; (8001900 <HAL_RCC_ClockConfig+0x1c4>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	4a58      	ldr	r2, [pc, #352]	; (8001900 <HAL_RCC_ClockConfig+0x1c4>)
 800179e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80017a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0308 	and.w	r3, r3, #8
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d005      	beq.n	80017bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017b0:	4b53      	ldr	r3, [pc, #332]	; (8001900 <HAL_RCC_ClockConfig+0x1c4>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	4a52      	ldr	r2, [pc, #328]	; (8001900 <HAL_RCC_ClockConfig+0x1c4>)
 80017b6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80017ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017bc:	4b50      	ldr	r3, [pc, #320]	; (8001900 <HAL_RCC_ClockConfig+0x1c4>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	494d      	ldr	r1, [pc, #308]	; (8001900 <HAL_RCC_ClockConfig+0x1c4>)
 80017ca:	4313      	orrs	r3, r2
 80017cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d040      	beq.n	800185c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d107      	bne.n	80017f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017e2:	4b47      	ldr	r3, [pc, #284]	; (8001900 <HAL_RCC_ClockConfig+0x1c4>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d115      	bne.n	800181a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e07f      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d107      	bne.n	800180a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017fa:	4b41      	ldr	r3, [pc, #260]	; (8001900 <HAL_RCC_ClockConfig+0x1c4>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d109      	bne.n	800181a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e073      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800180a:	4b3d      	ldr	r3, [pc, #244]	; (8001900 <HAL_RCC_ClockConfig+0x1c4>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d101      	bne.n	800181a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e06b      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800181a:	4b39      	ldr	r3, [pc, #228]	; (8001900 <HAL_RCC_ClockConfig+0x1c4>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f023 0203 	bic.w	r2, r3, #3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	4936      	ldr	r1, [pc, #216]	; (8001900 <HAL_RCC_ClockConfig+0x1c4>)
 8001828:	4313      	orrs	r3, r2
 800182a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800182c:	f7fe ffe2 	bl	80007f4 <HAL_GetTick>
 8001830:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001832:	e00a      	b.n	800184a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001834:	f7fe ffde 	bl	80007f4 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001842:	4293      	cmp	r3, r2
 8001844:	d901      	bls.n	800184a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e053      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800184a:	4b2d      	ldr	r3, [pc, #180]	; (8001900 <HAL_RCC_ClockConfig+0x1c4>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f003 020c 	and.w	r2, r3, #12
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	429a      	cmp	r2, r3
 800185a:	d1eb      	bne.n	8001834 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800185c:	4b27      	ldr	r3, [pc, #156]	; (80018fc <HAL_RCC_ClockConfig+0x1c0>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0307 	and.w	r3, r3, #7
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	429a      	cmp	r2, r3
 8001868:	d210      	bcs.n	800188c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800186a:	4b24      	ldr	r3, [pc, #144]	; (80018fc <HAL_RCC_ClockConfig+0x1c0>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f023 0207 	bic.w	r2, r3, #7
 8001872:	4922      	ldr	r1, [pc, #136]	; (80018fc <HAL_RCC_ClockConfig+0x1c0>)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	4313      	orrs	r3, r2
 8001878:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800187a:	4b20      	ldr	r3, [pc, #128]	; (80018fc <HAL_RCC_ClockConfig+0x1c0>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	683a      	ldr	r2, [r7, #0]
 8001884:	429a      	cmp	r2, r3
 8001886:	d001      	beq.n	800188c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e032      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0304 	and.w	r3, r3, #4
 8001894:	2b00      	cmp	r3, #0
 8001896:	d008      	beq.n	80018aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001898:	4b19      	ldr	r3, [pc, #100]	; (8001900 <HAL_RCC_ClockConfig+0x1c4>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	4916      	ldr	r1, [pc, #88]	; (8001900 <HAL_RCC_ClockConfig+0x1c4>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0308 	and.w	r3, r3, #8
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d009      	beq.n	80018ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018b6:	4b12      	ldr	r3, [pc, #72]	; (8001900 <HAL_RCC_ClockConfig+0x1c4>)
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	691b      	ldr	r3, [r3, #16]
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	490e      	ldr	r1, [pc, #56]	; (8001900 <HAL_RCC_ClockConfig+0x1c4>)
 80018c6:	4313      	orrs	r3, r2
 80018c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018ca:	f000 f821 	bl	8001910 <HAL_RCC_GetSysClockFreq>
 80018ce:	4601      	mov	r1, r0
 80018d0:	4b0b      	ldr	r3, [pc, #44]	; (8001900 <HAL_RCC_ClockConfig+0x1c4>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	091b      	lsrs	r3, r3, #4
 80018d6:	f003 030f 	and.w	r3, r3, #15
 80018da:	4a0a      	ldr	r2, [pc, #40]	; (8001904 <HAL_RCC_ClockConfig+0x1c8>)
 80018dc:	5cd3      	ldrb	r3, [r2, r3]
 80018de:	fa21 f303 	lsr.w	r3, r1, r3
 80018e2:	4a09      	ldr	r2, [pc, #36]	; (8001908 <HAL_RCC_ClockConfig+0x1cc>)
 80018e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80018e6:	4b09      	ldr	r3, [pc, #36]	; (800190c <HAL_RCC_ClockConfig+0x1d0>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7fe ff40 	bl	8000770 <HAL_InitTick>

  return HAL_OK;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40022000 	.word	0x40022000
 8001900:	40021000 	.word	0x40021000
 8001904:	08002f88 	.word	0x08002f88
 8001908:	20000000 	.word	0x20000000
 800190c:	20000004 	.word	0x20000004

08001910 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001910:	b490      	push	{r4, r7}
 8001912:	b08a      	sub	sp, #40	; 0x28
 8001914:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001916:	4b2a      	ldr	r3, [pc, #168]	; (80019c0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001918:	1d3c      	adds	r4, r7, #4
 800191a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800191c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001920:	4b28      	ldr	r3, [pc, #160]	; (80019c4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001922:	881b      	ldrh	r3, [r3, #0]
 8001924:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001926:	2300      	movs	r3, #0
 8001928:	61fb      	str	r3, [r7, #28]
 800192a:	2300      	movs	r3, #0
 800192c:	61bb      	str	r3, [r7, #24]
 800192e:	2300      	movs	r3, #0
 8001930:	627b      	str	r3, [r7, #36]	; 0x24
 8001932:	2300      	movs	r3, #0
 8001934:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001936:	2300      	movs	r3, #0
 8001938:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800193a:	4b23      	ldr	r3, [pc, #140]	; (80019c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	f003 030c 	and.w	r3, r3, #12
 8001946:	2b04      	cmp	r3, #4
 8001948:	d002      	beq.n	8001950 <HAL_RCC_GetSysClockFreq+0x40>
 800194a:	2b08      	cmp	r3, #8
 800194c:	d003      	beq.n	8001956 <HAL_RCC_GetSysClockFreq+0x46>
 800194e:	e02d      	b.n	80019ac <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001950:	4b1e      	ldr	r3, [pc, #120]	; (80019cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001952:	623b      	str	r3, [r7, #32]
      break;
 8001954:	e02d      	b.n	80019b2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	0c9b      	lsrs	r3, r3, #18
 800195a:	f003 030f 	and.w	r3, r3, #15
 800195e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001962:	4413      	add	r3, r2
 8001964:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001968:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d013      	beq.n	800199c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001974:	4b14      	ldr	r3, [pc, #80]	; (80019c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	0c5b      	lsrs	r3, r3, #17
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001982:	4413      	add	r3, r2
 8001984:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001988:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	4a0f      	ldr	r2, [pc, #60]	; (80019cc <HAL_RCC_GetSysClockFreq+0xbc>)
 800198e:	fb02 f203 	mul.w	r2, r2, r3
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	fbb2 f3f3 	udiv	r3, r2, r3
 8001998:	627b      	str	r3, [r7, #36]	; 0x24
 800199a:	e004      	b.n	80019a6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	4a0c      	ldr	r2, [pc, #48]	; (80019d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 80019a0:	fb02 f303 	mul.w	r3, r2, r3
 80019a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80019a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a8:	623b      	str	r3, [r7, #32]
      break;
 80019aa:	e002      	b.n	80019b2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019ac:	4b07      	ldr	r3, [pc, #28]	; (80019cc <HAL_RCC_GetSysClockFreq+0xbc>)
 80019ae:	623b      	str	r3, [r7, #32]
      break;
 80019b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019b2:	6a3b      	ldr	r3, [r7, #32]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3728      	adds	r7, #40	; 0x28
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bc90      	pop	{r4, r7}
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	08002f74 	.word	0x08002f74
 80019c4:	08002f84 	.word	0x08002f84
 80019c8:	40021000 	.word	0x40021000
 80019cc:	007a1200 	.word	0x007a1200
 80019d0:	003d0900 	.word	0x003d0900

080019d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019d8:	4b02      	ldr	r3, [pc, #8]	; (80019e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80019da:	681b      	ldr	r3, [r3, #0]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	46bd      	mov	sp, r7
 80019e0:	bc80      	pop	{r7}
 80019e2:	4770      	bx	lr
 80019e4:	20000000 	.word	0x20000000

080019e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019ec:	f7ff fff2 	bl	80019d4 <HAL_RCC_GetHCLKFreq>
 80019f0:	4601      	mov	r1, r0
 80019f2:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	0a1b      	lsrs	r3, r3, #8
 80019f8:	f003 0307 	and.w	r3, r3, #7
 80019fc:	4a03      	ldr	r2, [pc, #12]	; (8001a0c <HAL_RCC_GetPCLK1Freq+0x24>)
 80019fe:	5cd3      	ldrb	r3, [r2, r3]
 8001a00:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	08002f98 	.word	0x08002f98

08001a10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a14:	f7ff ffde 	bl	80019d4 <HAL_RCC_GetHCLKFreq>
 8001a18:	4601      	mov	r1, r0
 8001a1a:	4b05      	ldr	r3, [pc, #20]	; (8001a30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	0adb      	lsrs	r3, r3, #11
 8001a20:	f003 0307 	and.w	r3, r3, #7
 8001a24:	4a03      	ldr	r2, [pc, #12]	; (8001a34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a26:	5cd3      	ldrb	r3, [r2, r3]
 8001a28:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40021000 	.word	0x40021000
 8001a34:	08002f98 	.word	0x08002f98

08001a38 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a40:	4b0a      	ldr	r3, [pc, #40]	; (8001a6c <RCC_Delay+0x34>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a0a      	ldr	r2, [pc, #40]	; (8001a70 <RCC_Delay+0x38>)
 8001a46:	fba2 2303 	umull	r2, r3, r2, r3
 8001a4a:	0a5b      	lsrs	r3, r3, #9
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	fb02 f303 	mul.w	r3, r2, r3
 8001a52:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a54:	bf00      	nop
  }
  while (Delay --);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	1e5a      	subs	r2, r3, #1
 8001a5a:	60fa      	str	r2, [r7, #12]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d1f9      	bne.n	8001a54 <RCC_Delay+0x1c>
}
 8001a60:	bf00      	nop
 8001a62:	3714      	adds	r7, #20
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bc80      	pop	{r7}
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	20000000 	.word	0x20000000
 8001a70:	10624dd3 	.word	0x10624dd3

08001a74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e03f      	b.n	8001b06 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d106      	bne.n	8001aa0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f7fe fd6a 	bl	8000574 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2224      	movs	r2, #36	; 0x24
 8001aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	68da      	ldr	r2, [r3, #12]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ab6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f000 fc27 	bl	800230c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	691a      	ldr	r2, [r3, #16]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001acc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	695a      	ldr	r2, [r3, #20]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001adc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	68da      	ldr	r2, [r3, #12]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001aec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2220      	movs	r2, #32
 8001af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2220      	movs	r2, #32
 8001b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b08a      	sub	sp, #40	; 0x28
 8001b12:	af02      	add	r7, sp, #8
 8001b14:	60f8      	str	r0, [r7, #12]
 8001b16:	60b9      	str	r1, [r7, #8]
 8001b18:	603b      	str	r3, [r7, #0]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b20      	cmp	r3, #32
 8001b2c:	d17c      	bne.n	8001c28 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d002      	beq.n	8001b3a <HAL_UART_Transmit+0x2c>
 8001b34:	88fb      	ldrh	r3, [r7, #6]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e075      	b.n	8001c2a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d101      	bne.n	8001b4c <HAL_UART_Transmit+0x3e>
 8001b48:	2302      	movs	r3, #2
 8001b4a:	e06e      	b.n	8001c2a <HAL_UART_Transmit+0x11c>
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2200      	movs	r2, #0
 8001b58:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2221      	movs	r2, #33	; 0x21
 8001b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b62:	f7fe fe47 	bl	80007f4 <HAL_GetTick>
 8001b66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	88fa      	ldrh	r2, [r7, #6]
 8001b6c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	88fa      	ldrh	r2, [r7, #6]
 8001b72:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b7c:	d108      	bne.n	8001b90 <HAL_UART_Transmit+0x82>
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	691b      	ldr	r3, [r3, #16]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d104      	bne.n	8001b90 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	61bb      	str	r3, [r7, #24]
 8001b8e:	e003      	b.n	8001b98 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001ba0:	e02a      	b.n	8001bf8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	9300      	str	r3, [sp, #0]
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	2180      	movs	r1, #128	; 0x80
 8001bac:	68f8      	ldr	r0, [r7, #12]
 8001bae:	f000 fa13 	bl	8001fd8 <UART_WaitOnFlagUntilTimeout>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e036      	b.n	8001c2a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d10b      	bne.n	8001bda <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	881b      	ldrh	r3, [r3, #0]
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001bd0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	3302      	adds	r3, #2
 8001bd6:	61bb      	str	r3, [r7, #24]
 8001bd8:	e007      	b.n	8001bea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	781a      	ldrb	r2, [r3, #0]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	3301      	adds	r3, #1
 8001be8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	b29a      	uxth	r2, r3
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1cf      	bne.n	8001ba2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	9300      	str	r3, [sp, #0]
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	2140      	movs	r1, #64	; 0x40
 8001c0c:	68f8      	ldr	r0, [r7, #12]
 8001c0e:	f000 f9e3 	bl	8001fd8 <UART_WaitOnFlagUntilTimeout>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e006      	b.n	8001c2a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2220      	movs	r2, #32
 8001c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001c24:	2300      	movs	r3, #0
 8001c26:	e000      	b.n	8001c2a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001c28:	2302      	movs	r3, #2
  }
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3720      	adds	r7, #32
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
	...

08001c34 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b08a      	sub	sp, #40	; 0x28
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	695b      	ldr	r3, [r3, #20]
 8001c52:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8001c54:	2300      	movs	r3, #0
 8001c56:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5e:	f003 030f 	and.w	r3, r3, #15
 8001c62:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d10d      	bne.n	8001c86 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6c:	f003 0320 	and.w	r3, r3, #32
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d008      	beq.n	8001c86 <HAL_UART_IRQHandler+0x52>
 8001c74:	6a3b      	ldr	r3, [r7, #32]
 8001c76:	f003 0320 	and.w	r3, r3, #32
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d003      	beq.n	8001c86 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 fa9b 	bl	80021ba <UART_Receive_IT>
      return;
 8001c84:	e17c      	b.n	8001f80 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	f000 80b1 	beq.w	8001df0 <HAL_UART_IRQHandler+0x1bc>
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d105      	bne.n	8001ca4 <HAL_UART_IRQHandler+0x70>
 8001c98:	6a3b      	ldr	r3, [r7, #32]
 8001c9a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f000 80a6 	beq.w	8001df0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d00a      	beq.n	8001cc4 <HAL_UART_IRQHandler+0x90>
 8001cae:	6a3b      	ldr	r3, [r7, #32]
 8001cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d005      	beq.n	8001cc4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbc:	f043 0201 	orr.w	r2, r3, #1
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc6:	f003 0304 	and.w	r3, r3, #4
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d00a      	beq.n	8001ce4 <HAL_UART_IRQHandler+0xb0>
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d005      	beq.n	8001ce4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cdc:	f043 0202 	orr.w	r2, r3, #2
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d00a      	beq.n	8001d04 <HAL_UART_IRQHandler+0xd0>
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	f003 0301 	and.w	r3, r3, #1
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d005      	beq.n	8001d04 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfc:	f043 0204 	orr.w	r2, r3, #4
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d06:	f003 0308 	and.w	r3, r3, #8
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d00f      	beq.n	8001d2e <HAL_UART_IRQHandler+0xfa>
 8001d0e:	6a3b      	ldr	r3, [r7, #32]
 8001d10:	f003 0320 	and.w	r3, r3, #32
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d104      	bne.n	8001d22 <HAL_UART_IRQHandler+0xee>
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d005      	beq.n	8001d2e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	f043 0208 	orr.w	r2, r3, #8
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f000 811f 	beq.w	8001f76 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3a:	f003 0320 	and.w	r3, r3, #32
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d007      	beq.n	8001d52 <HAL_UART_IRQHandler+0x11e>
 8001d42:	6a3b      	ldr	r3, [r7, #32]
 8001d44:	f003 0320 	and.w	r3, r3, #32
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d002      	beq.n	8001d52 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f000 fa34 	bl	80021ba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	695b      	ldr	r3, [r3, #20]
 8001d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	bf14      	ite	ne
 8001d60:	2301      	movne	r3, #1
 8001d62:	2300      	moveq	r3, #0
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6c:	f003 0308 	and.w	r3, r3, #8
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d102      	bne.n	8001d7a <HAL_UART_IRQHandler+0x146>
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d031      	beq.n	8001dde <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 f976 	bl	800206c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d023      	beq.n	8001dd6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	695a      	ldr	r2, [r3, #20]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d9c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d013      	beq.n	8001dce <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001daa:	4a77      	ldr	r2, [pc, #476]	; (8001f88 <HAL_UART_IRQHandler+0x354>)
 8001dac:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7fe fe70 	bl	8000a98 <HAL_DMA_Abort_IT>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d016      	beq.n	8001dec <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001dc8:	4610      	mov	r0, r2
 8001dca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001dcc:	e00e      	b.n	8001dec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 f8ee 	bl	8001fb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001dd4:	e00a      	b.n	8001dec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 f8ea 	bl	8001fb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ddc:	e006      	b.n	8001dec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 f8e6 	bl	8001fb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8001dea:	e0c4      	b.n	8001f76 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001dec:	bf00      	nop
    return;
 8001dee:	e0c2      	b.n	8001f76 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	f040 80a1 	bne.w	8001f3c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfc:	f003 0310 	and.w	r3, r3, #16
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f000 809b 	beq.w	8001f3c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8001e06:	6a3b      	ldr	r3, [r7, #32]
 8001e08:	f003 0310 	and.w	r3, r3, #16
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	f000 8095 	beq.w	8001f3c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001e12:	2300      	movs	r3, #0
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d04e      	beq.n	8001ed4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8001e40:	8a3b      	ldrh	r3, [r7, #16]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f000 8099 	beq.w	8001f7a <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001e4c:	8a3a      	ldrh	r2, [r7, #16]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	f080 8093 	bcs.w	8001f7a <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	8a3a      	ldrh	r2, [r7, #16]
 8001e58:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	2b20      	cmp	r3, #32
 8001e62:	d02b      	beq.n	8001ebc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68da      	ldr	r2, [r3, #12]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e72:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	695a      	ldr	r2, [r3, #20]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 0201 	bic.w	r2, r2, #1
 8001e82:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	695a      	ldr	r2, [r3, #20]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e92:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2220      	movs	r2, #32
 8001e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68da      	ldr	r2, [r3, #12]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f022 0210 	bic.w	r2, r2, #16
 8001eb0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7fe fdb3 	bl	8000a22 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	4619      	mov	r1, r3
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f000 f878 	bl	8001fc2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8001ed2:	e052      	b.n	8001f7a <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d048      	beq.n	8001f7e <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8001eec:	8a7b      	ldrh	r3, [r7, #18]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d045      	beq.n	8001f7e <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68da      	ldr	r2, [r3, #12]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001f00:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	695a      	ldr	r2, [r3, #20]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f022 0201 	bic.w	r2, r2, #1
 8001f10:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2220      	movs	r2, #32
 8001f16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68da      	ldr	r2, [r3, #12]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f022 0210 	bic.w	r2, r2, #16
 8001f2e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001f30:	8a7b      	ldrh	r3, [r7, #18]
 8001f32:	4619      	mov	r1, r3
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f000 f844 	bl	8001fc2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8001f3a:	e020      	b.n	8001f7e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d008      	beq.n	8001f58 <HAL_UART_IRQHandler+0x324>
 8001f46:	6a3b      	ldr	r3, [r7, #32]
 8001f48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d003      	beq.n	8001f58 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f000 f8cb 	bl	80020ec <UART_Transmit_IT>
    return;
 8001f56:	e013      	b.n	8001f80 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00e      	beq.n	8001f80 <HAL_UART_IRQHandler+0x34c>
 8001f62:	6a3b      	ldr	r3, [r7, #32]
 8001f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d009      	beq.n	8001f80 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 f90c 	bl	800218a <UART_EndTransmit_IT>
    return;
 8001f72:	bf00      	nop
 8001f74:	e004      	b.n	8001f80 <HAL_UART_IRQHandler+0x34c>
    return;
 8001f76:	bf00      	nop
 8001f78:	e002      	b.n	8001f80 <HAL_UART_IRQHandler+0x34c>
      return;
 8001f7a:	bf00      	nop
 8001f7c:	e000      	b.n	8001f80 <HAL_UART_IRQHandler+0x34c>
      return;
 8001f7e:	bf00      	nop
  }
}
 8001f80:	3728      	adds	r7, #40	; 0x28
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	080020c5 	.word	0x080020c5

08001f8c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bc80      	pop	{r7}
 8001f9c:	4770      	bx	lr

08001f9e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bc80      	pop	{r7}
 8001fae:	4770      	bx	lr

08001fb0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bc80      	pop	{r7}
 8001fc0:	4770      	bx	lr

08001fc2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
 8001fca:	460b      	mov	r3, r1
 8001fcc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001fce:	bf00      	nop
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bc80      	pop	{r7}
 8001fd6:	4770      	bx	lr

08001fd8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	603b      	str	r3, [r7, #0]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fe8:	e02c      	b.n	8002044 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff0:	d028      	beq.n	8002044 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d007      	beq.n	8002008 <UART_WaitOnFlagUntilTimeout+0x30>
 8001ff8:	f7fe fbfc 	bl	80007f4 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	429a      	cmp	r2, r3
 8002006:	d21d      	bcs.n	8002044 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	68da      	ldr	r2, [r3, #12]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002016:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	695a      	ldr	r2, [r3, #20]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f022 0201 	bic.w	r2, r2, #1
 8002026:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2220      	movs	r2, #32
 800202c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2220      	movs	r2, #32
 8002034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e00f      	b.n	8002064 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	4013      	ands	r3, r2
 800204e:	68ba      	ldr	r2, [r7, #8]
 8002050:	429a      	cmp	r2, r3
 8002052:	bf0c      	ite	eq
 8002054:	2301      	moveq	r3, #1
 8002056:	2300      	movne	r3, #0
 8002058:	b2db      	uxtb	r3, r3
 800205a:	461a      	mov	r2, r3
 800205c:	79fb      	ldrb	r3, [r7, #7]
 800205e:	429a      	cmp	r2, r3
 8002060:	d0c3      	beq.n	8001fea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	3710      	adds	r7, #16
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	68da      	ldr	r2, [r3, #12]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002082:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	695a      	ldr	r2, [r3, #20]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f022 0201 	bic.w	r2, r2, #1
 8002092:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002098:	2b01      	cmp	r3, #1
 800209a:	d107      	bne.n	80020ac <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68da      	ldr	r2, [r3, #12]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f022 0210 	bic.w	r2, r2, #16
 80020aa:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2220      	movs	r2, #32
 80020b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80020ba:	bf00      	nop
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	bc80      	pop	{r7}
 80020c2:	4770      	bx	lr

080020c4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2200      	movs	r2, #0
 80020d6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2200      	movs	r2, #0
 80020dc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80020de:	68f8      	ldr	r0, [r7, #12]
 80020e0:	f7ff ff66 	bl	8001fb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80020e4:	bf00      	nop
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	2b21      	cmp	r3, #33	; 0x21
 80020fe:	d13e      	bne.n	800217e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002108:	d114      	bne.n	8002134 <UART_Transmit_IT+0x48>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d110      	bne.n	8002134 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a1b      	ldr	r3, [r3, #32]
 8002116:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	881b      	ldrh	r3, [r3, #0]
 800211c:	461a      	mov	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002126:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a1b      	ldr	r3, [r3, #32]
 800212c:	1c9a      	adds	r2, r3, #2
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	621a      	str	r2, [r3, #32]
 8002132:	e008      	b.n	8002146 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a1b      	ldr	r3, [r3, #32]
 8002138:	1c59      	adds	r1, r3, #1
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	6211      	str	r1, [r2, #32]
 800213e:	781a      	ldrb	r2, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800214a:	b29b      	uxth	r3, r3
 800214c:	3b01      	subs	r3, #1
 800214e:	b29b      	uxth	r3, r3
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	4619      	mov	r1, r3
 8002154:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002156:	2b00      	cmp	r3, #0
 8002158:	d10f      	bne.n	800217a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68da      	ldr	r2, [r3, #12]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002168:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68da      	ldr	r2, [r3, #12]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002178:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800217a:	2300      	movs	r3, #0
 800217c:	e000      	b.n	8002180 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800217e:	2302      	movs	r3, #2
  }
}
 8002180:	4618      	mov	r0, r3
 8002182:	3714      	adds	r7, #20
 8002184:	46bd      	mov	sp, r7
 8002186:	bc80      	pop	{r7}
 8002188:	4770      	bx	lr

0800218a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b082      	sub	sp, #8
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68da      	ldr	r2, [r3, #12]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021a0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2220      	movs	r2, #32
 80021a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7ff feee 	bl	8001f8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b086      	sub	sp, #24
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b22      	cmp	r3, #34	; 0x22
 80021cc:	f040 8099 	bne.w	8002302 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021d8:	d117      	bne.n	800220a <UART_Receive_IT+0x50>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d113      	bne.n	800220a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80021e2:	2300      	movs	r3, #0
 80021e4:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ea:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021f8:	b29a      	uxth	r2, r3
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002202:	1c9a      	adds	r2, r3, #2
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	629a      	str	r2, [r3, #40]	; 0x28
 8002208:	e026      	b.n	8002258 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002210:	2300      	movs	r3, #0
 8002212:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800221c:	d007      	beq.n	800222e <UART_Receive_IT+0x74>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d10a      	bne.n	800223c <UART_Receive_IT+0x82>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d106      	bne.n	800223c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	b2da      	uxtb	r2, r3
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	701a      	strb	r2, [r3, #0]
 800223a:	e008      	b.n	800224e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	b2db      	uxtb	r3, r3
 8002244:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002248:	b2da      	uxtb	r2, r3
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002252:	1c5a      	adds	r2, r3, #1
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800225c:	b29b      	uxth	r3, r3
 800225e:	3b01      	subs	r3, #1
 8002260:	b29b      	uxth	r3, r3
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	4619      	mov	r1, r3
 8002266:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002268:	2b00      	cmp	r3, #0
 800226a:	d148      	bne.n	80022fe <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68da      	ldr	r2, [r3, #12]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f022 0220 	bic.w	r2, r2, #32
 800227a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68da      	ldr	r2, [r3, #12]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800228a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	695a      	ldr	r2, [r3, #20]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f022 0201 	bic.w	r2, r2, #1
 800229a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2220      	movs	r2, #32
 80022a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d123      	bne.n	80022f4 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68da      	ldr	r2, [r3, #12]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f022 0210 	bic.w	r2, r2, #16
 80022c0:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0310 	and.w	r3, r3, #16
 80022cc:	2b10      	cmp	r3, #16
 80022ce:	d10a      	bne.n	80022e6 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80022d0:	2300      	movs	r3, #0
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	60fb      	str	r3, [r7, #12]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	60fb      	str	r3, [r7, #12]
 80022e4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80022ea:	4619      	mov	r1, r3
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f7ff fe68 	bl	8001fc2 <HAL_UARTEx_RxEventCallback>
 80022f2:	e002      	b.n	80022fa <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f7ff fe52 	bl	8001f9e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80022fa:	2300      	movs	r3, #0
 80022fc:	e002      	b.n	8002304 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80022fe:	2300      	movs	r3, #0
 8002300:	e000      	b.n	8002304 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002302:	2302      	movs	r3, #2
  }
}
 8002304:	4618      	mov	r0, r3
 8002306:	3718      	adds	r7, #24
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	68da      	ldr	r2, [r3, #12]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	430a      	orrs	r2, r1
 8002328:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	689a      	ldr	r2, [r3, #8]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	431a      	orrs	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	695b      	ldr	r3, [r3, #20]
 8002338:	4313      	orrs	r3, r2
 800233a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002346:	f023 030c 	bic.w	r3, r3, #12
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	6812      	ldr	r2, [r2, #0]
 800234e:	68b9      	ldr	r1, [r7, #8]
 8002350:	430b      	orrs	r3, r1
 8002352:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	699a      	ldr	r2, [r3, #24]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	430a      	orrs	r2, r1
 8002368:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a2c      	ldr	r2, [pc, #176]	; (8002420 <UART_SetConfig+0x114>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d103      	bne.n	800237c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002374:	f7ff fb4c 	bl	8001a10 <HAL_RCC_GetPCLK2Freq>
 8002378:	60f8      	str	r0, [r7, #12]
 800237a:	e002      	b.n	8002382 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800237c:	f7ff fb34 	bl	80019e8 <HAL_RCC_GetPCLK1Freq>
 8002380:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	4613      	mov	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4413      	add	r3, r2
 800238a:	009a      	lsls	r2, r3, #2
 800238c:	441a      	add	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	fbb2 f3f3 	udiv	r3, r2, r3
 8002398:	4a22      	ldr	r2, [pc, #136]	; (8002424 <UART_SetConfig+0x118>)
 800239a:	fba2 2303 	umull	r2, r3, r2, r3
 800239e:	095b      	lsrs	r3, r3, #5
 80023a0:	0119      	lsls	r1, r3, #4
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	4613      	mov	r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	4413      	add	r3, r2
 80023aa:	009a      	lsls	r2, r3, #2
 80023ac:	441a      	add	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80023b8:	4b1a      	ldr	r3, [pc, #104]	; (8002424 <UART_SetConfig+0x118>)
 80023ba:	fba3 0302 	umull	r0, r3, r3, r2
 80023be:	095b      	lsrs	r3, r3, #5
 80023c0:	2064      	movs	r0, #100	; 0x64
 80023c2:	fb00 f303 	mul.w	r3, r0, r3
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	011b      	lsls	r3, r3, #4
 80023ca:	3332      	adds	r3, #50	; 0x32
 80023cc:	4a15      	ldr	r2, [pc, #84]	; (8002424 <UART_SetConfig+0x118>)
 80023ce:	fba2 2303 	umull	r2, r3, r2, r3
 80023d2:	095b      	lsrs	r3, r3, #5
 80023d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023d8:	4419      	add	r1, r3
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	4613      	mov	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	4413      	add	r3, r2
 80023e2:	009a      	lsls	r2, r3, #2
 80023e4:	441a      	add	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80023f0:	4b0c      	ldr	r3, [pc, #48]	; (8002424 <UART_SetConfig+0x118>)
 80023f2:	fba3 0302 	umull	r0, r3, r3, r2
 80023f6:	095b      	lsrs	r3, r3, #5
 80023f8:	2064      	movs	r0, #100	; 0x64
 80023fa:	fb00 f303 	mul.w	r3, r0, r3
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	011b      	lsls	r3, r3, #4
 8002402:	3332      	adds	r3, #50	; 0x32
 8002404:	4a07      	ldr	r2, [pc, #28]	; (8002424 <UART_SetConfig+0x118>)
 8002406:	fba2 2303 	umull	r2, r3, r2, r3
 800240a:	095b      	lsrs	r3, r3, #5
 800240c:	f003 020f 	and.w	r2, r3, #15
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	440a      	add	r2, r1
 8002416:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002418:	bf00      	nop
 800241a:	3710      	adds	r7, #16
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	40013800 	.word	0x40013800
 8002424:	51eb851f 	.word	0x51eb851f

08002428 <__errno>:
 8002428:	4b01      	ldr	r3, [pc, #4]	; (8002430 <__errno+0x8>)
 800242a:	6818      	ldr	r0, [r3, #0]
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	2000000c 	.word	0x2000000c

08002434 <__libc_init_array>:
 8002434:	b570      	push	{r4, r5, r6, lr}
 8002436:	2500      	movs	r5, #0
 8002438:	4e0c      	ldr	r6, [pc, #48]	; (800246c <__libc_init_array+0x38>)
 800243a:	4c0d      	ldr	r4, [pc, #52]	; (8002470 <__libc_init_array+0x3c>)
 800243c:	1ba4      	subs	r4, r4, r6
 800243e:	10a4      	asrs	r4, r4, #2
 8002440:	42a5      	cmp	r5, r4
 8002442:	d109      	bne.n	8002458 <__libc_init_array+0x24>
 8002444:	f000 fc68 	bl	8002d18 <_init>
 8002448:	2500      	movs	r5, #0
 800244a:	4e0a      	ldr	r6, [pc, #40]	; (8002474 <__libc_init_array+0x40>)
 800244c:	4c0a      	ldr	r4, [pc, #40]	; (8002478 <__libc_init_array+0x44>)
 800244e:	1ba4      	subs	r4, r4, r6
 8002450:	10a4      	asrs	r4, r4, #2
 8002452:	42a5      	cmp	r5, r4
 8002454:	d105      	bne.n	8002462 <__libc_init_array+0x2e>
 8002456:	bd70      	pop	{r4, r5, r6, pc}
 8002458:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800245c:	4798      	blx	r3
 800245e:	3501      	adds	r5, #1
 8002460:	e7ee      	b.n	8002440 <__libc_init_array+0xc>
 8002462:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002466:	4798      	blx	r3
 8002468:	3501      	adds	r5, #1
 800246a:	e7f2      	b.n	8002452 <__libc_init_array+0x1e>
 800246c:	08002fd4 	.word	0x08002fd4
 8002470:	08002fd4 	.word	0x08002fd4
 8002474:	08002fd4 	.word	0x08002fd4
 8002478:	08002fd8 	.word	0x08002fd8

0800247c <memset>:
 800247c:	4603      	mov	r3, r0
 800247e:	4402      	add	r2, r0
 8002480:	4293      	cmp	r3, r2
 8002482:	d100      	bne.n	8002486 <memset+0xa>
 8002484:	4770      	bx	lr
 8002486:	f803 1b01 	strb.w	r1, [r3], #1
 800248a:	e7f9      	b.n	8002480 <memset+0x4>

0800248c <sniprintf>:
 800248c:	b40c      	push	{r2, r3}
 800248e:	b530      	push	{r4, r5, lr}
 8002490:	4b17      	ldr	r3, [pc, #92]	; (80024f0 <sniprintf+0x64>)
 8002492:	1e0c      	subs	r4, r1, #0
 8002494:	b09d      	sub	sp, #116	; 0x74
 8002496:	681d      	ldr	r5, [r3, #0]
 8002498:	da08      	bge.n	80024ac <sniprintf+0x20>
 800249a:	238b      	movs	r3, #139	; 0x8b
 800249c:	f04f 30ff 	mov.w	r0, #4294967295
 80024a0:	602b      	str	r3, [r5, #0]
 80024a2:	b01d      	add	sp, #116	; 0x74
 80024a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80024a8:	b002      	add	sp, #8
 80024aa:	4770      	bx	lr
 80024ac:	f44f 7302 	mov.w	r3, #520	; 0x208
 80024b0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80024b4:	bf0c      	ite	eq
 80024b6:	4623      	moveq	r3, r4
 80024b8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80024bc:	9304      	str	r3, [sp, #16]
 80024be:	9307      	str	r3, [sp, #28]
 80024c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024c4:	9002      	str	r0, [sp, #8]
 80024c6:	9006      	str	r0, [sp, #24]
 80024c8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80024cc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80024ce:	ab21      	add	r3, sp, #132	; 0x84
 80024d0:	a902      	add	r1, sp, #8
 80024d2:	4628      	mov	r0, r5
 80024d4:	9301      	str	r3, [sp, #4]
 80024d6:	f000 f887 	bl	80025e8 <_svfiprintf_r>
 80024da:	1c43      	adds	r3, r0, #1
 80024dc:	bfbc      	itt	lt
 80024de:	238b      	movlt	r3, #139	; 0x8b
 80024e0:	602b      	strlt	r3, [r5, #0]
 80024e2:	2c00      	cmp	r4, #0
 80024e4:	d0dd      	beq.n	80024a2 <sniprintf+0x16>
 80024e6:	2200      	movs	r2, #0
 80024e8:	9b02      	ldr	r3, [sp, #8]
 80024ea:	701a      	strb	r2, [r3, #0]
 80024ec:	e7d9      	b.n	80024a2 <sniprintf+0x16>
 80024ee:	bf00      	nop
 80024f0:	2000000c 	.word	0x2000000c

080024f4 <siprintf>:
 80024f4:	b40e      	push	{r1, r2, r3}
 80024f6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80024fa:	b500      	push	{lr}
 80024fc:	b09c      	sub	sp, #112	; 0x70
 80024fe:	ab1d      	add	r3, sp, #116	; 0x74
 8002500:	9002      	str	r0, [sp, #8]
 8002502:	9006      	str	r0, [sp, #24]
 8002504:	9107      	str	r1, [sp, #28]
 8002506:	9104      	str	r1, [sp, #16]
 8002508:	4808      	ldr	r0, [pc, #32]	; (800252c <siprintf+0x38>)
 800250a:	4909      	ldr	r1, [pc, #36]	; (8002530 <siprintf+0x3c>)
 800250c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002510:	9105      	str	r1, [sp, #20]
 8002512:	6800      	ldr	r0, [r0, #0]
 8002514:	a902      	add	r1, sp, #8
 8002516:	9301      	str	r3, [sp, #4]
 8002518:	f000 f866 	bl	80025e8 <_svfiprintf_r>
 800251c:	2200      	movs	r2, #0
 800251e:	9b02      	ldr	r3, [sp, #8]
 8002520:	701a      	strb	r2, [r3, #0]
 8002522:	b01c      	add	sp, #112	; 0x70
 8002524:	f85d eb04 	ldr.w	lr, [sp], #4
 8002528:	b003      	add	sp, #12
 800252a:	4770      	bx	lr
 800252c:	2000000c 	.word	0x2000000c
 8002530:	ffff0208 	.word	0xffff0208

08002534 <__ssputs_r>:
 8002534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002538:	688e      	ldr	r6, [r1, #8]
 800253a:	4682      	mov	sl, r0
 800253c:	429e      	cmp	r6, r3
 800253e:	460c      	mov	r4, r1
 8002540:	4690      	mov	r8, r2
 8002542:	4699      	mov	r9, r3
 8002544:	d837      	bhi.n	80025b6 <__ssputs_r+0x82>
 8002546:	898a      	ldrh	r2, [r1, #12]
 8002548:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800254c:	d031      	beq.n	80025b2 <__ssputs_r+0x7e>
 800254e:	2302      	movs	r3, #2
 8002550:	6825      	ldr	r5, [r4, #0]
 8002552:	6909      	ldr	r1, [r1, #16]
 8002554:	1a6f      	subs	r7, r5, r1
 8002556:	6965      	ldr	r5, [r4, #20]
 8002558:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800255c:	fb95 f5f3 	sdiv	r5, r5, r3
 8002560:	f109 0301 	add.w	r3, r9, #1
 8002564:	443b      	add	r3, r7
 8002566:	429d      	cmp	r5, r3
 8002568:	bf38      	it	cc
 800256a:	461d      	movcc	r5, r3
 800256c:	0553      	lsls	r3, r2, #21
 800256e:	d530      	bpl.n	80025d2 <__ssputs_r+0x9e>
 8002570:	4629      	mov	r1, r5
 8002572:	f000 fb37 	bl	8002be4 <_malloc_r>
 8002576:	4606      	mov	r6, r0
 8002578:	b950      	cbnz	r0, 8002590 <__ssputs_r+0x5c>
 800257a:	230c      	movs	r3, #12
 800257c:	f04f 30ff 	mov.w	r0, #4294967295
 8002580:	f8ca 3000 	str.w	r3, [sl]
 8002584:	89a3      	ldrh	r3, [r4, #12]
 8002586:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800258a:	81a3      	strh	r3, [r4, #12]
 800258c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002590:	463a      	mov	r2, r7
 8002592:	6921      	ldr	r1, [r4, #16]
 8002594:	f000 fab6 	bl	8002b04 <memcpy>
 8002598:	89a3      	ldrh	r3, [r4, #12]
 800259a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800259e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025a2:	81a3      	strh	r3, [r4, #12]
 80025a4:	6126      	str	r6, [r4, #16]
 80025a6:	443e      	add	r6, r7
 80025a8:	6026      	str	r6, [r4, #0]
 80025aa:	464e      	mov	r6, r9
 80025ac:	6165      	str	r5, [r4, #20]
 80025ae:	1bed      	subs	r5, r5, r7
 80025b0:	60a5      	str	r5, [r4, #8]
 80025b2:	454e      	cmp	r6, r9
 80025b4:	d900      	bls.n	80025b8 <__ssputs_r+0x84>
 80025b6:	464e      	mov	r6, r9
 80025b8:	4632      	mov	r2, r6
 80025ba:	4641      	mov	r1, r8
 80025bc:	6820      	ldr	r0, [r4, #0]
 80025be:	f000 faac 	bl	8002b1a <memmove>
 80025c2:	68a3      	ldr	r3, [r4, #8]
 80025c4:	2000      	movs	r0, #0
 80025c6:	1b9b      	subs	r3, r3, r6
 80025c8:	60a3      	str	r3, [r4, #8]
 80025ca:	6823      	ldr	r3, [r4, #0]
 80025cc:	441e      	add	r6, r3
 80025ce:	6026      	str	r6, [r4, #0]
 80025d0:	e7dc      	b.n	800258c <__ssputs_r+0x58>
 80025d2:	462a      	mov	r2, r5
 80025d4:	f000 fb60 	bl	8002c98 <_realloc_r>
 80025d8:	4606      	mov	r6, r0
 80025da:	2800      	cmp	r0, #0
 80025dc:	d1e2      	bne.n	80025a4 <__ssputs_r+0x70>
 80025de:	6921      	ldr	r1, [r4, #16]
 80025e0:	4650      	mov	r0, sl
 80025e2:	f000 fab3 	bl	8002b4c <_free_r>
 80025e6:	e7c8      	b.n	800257a <__ssputs_r+0x46>

080025e8 <_svfiprintf_r>:
 80025e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025ec:	461d      	mov	r5, r3
 80025ee:	898b      	ldrh	r3, [r1, #12]
 80025f0:	b09d      	sub	sp, #116	; 0x74
 80025f2:	061f      	lsls	r7, r3, #24
 80025f4:	4680      	mov	r8, r0
 80025f6:	460c      	mov	r4, r1
 80025f8:	4616      	mov	r6, r2
 80025fa:	d50f      	bpl.n	800261c <_svfiprintf_r+0x34>
 80025fc:	690b      	ldr	r3, [r1, #16]
 80025fe:	b96b      	cbnz	r3, 800261c <_svfiprintf_r+0x34>
 8002600:	2140      	movs	r1, #64	; 0x40
 8002602:	f000 faef 	bl	8002be4 <_malloc_r>
 8002606:	6020      	str	r0, [r4, #0]
 8002608:	6120      	str	r0, [r4, #16]
 800260a:	b928      	cbnz	r0, 8002618 <_svfiprintf_r+0x30>
 800260c:	230c      	movs	r3, #12
 800260e:	f8c8 3000 	str.w	r3, [r8]
 8002612:	f04f 30ff 	mov.w	r0, #4294967295
 8002616:	e0c8      	b.n	80027aa <_svfiprintf_r+0x1c2>
 8002618:	2340      	movs	r3, #64	; 0x40
 800261a:	6163      	str	r3, [r4, #20]
 800261c:	2300      	movs	r3, #0
 800261e:	9309      	str	r3, [sp, #36]	; 0x24
 8002620:	2320      	movs	r3, #32
 8002622:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002626:	2330      	movs	r3, #48	; 0x30
 8002628:	f04f 0b01 	mov.w	fp, #1
 800262c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002630:	9503      	str	r5, [sp, #12]
 8002632:	4637      	mov	r7, r6
 8002634:	463d      	mov	r5, r7
 8002636:	f815 3b01 	ldrb.w	r3, [r5], #1
 800263a:	b10b      	cbz	r3, 8002640 <_svfiprintf_r+0x58>
 800263c:	2b25      	cmp	r3, #37	; 0x25
 800263e:	d13e      	bne.n	80026be <_svfiprintf_r+0xd6>
 8002640:	ebb7 0a06 	subs.w	sl, r7, r6
 8002644:	d00b      	beq.n	800265e <_svfiprintf_r+0x76>
 8002646:	4653      	mov	r3, sl
 8002648:	4632      	mov	r2, r6
 800264a:	4621      	mov	r1, r4
 800264c:	4640      	mov	r0, r8
 800264e:	f7ff ff71 	bl	8002534 <__ssputs_r>
 8002652:	3001      	adds	r0, #1
 8002654:	f000 80a4 	beq.w	80027a0 <_svfiprintf_r+0x1b8>
 8002658:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800265a:	4453      	add	r3, sl
 800265c:	9309      	str	r3, [sp, #36]	; 0x24
 800265e:	783b      	ldrb	r3, [r7, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	f000 809d 	beq.w	80027a0 <_svfiprintf_r+0x1b8>
 8002666:	2300      	movs	r3, #0
 8002668:	f04f 32ff 	mov.w	r2, #4294967295
 800266c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002670:	9304      	str	r3, [sp, #16]
 8002672:	9307      	str	r3, [sp, #28]
 8002674:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002678:	931a      	str	r3, [sp, #104]	; 0x68
 800267a:	462f      	mov	r7, r5
 800267c:	2205      	movs	r2, #5
 800267e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002682:	4850      	ldr	r0, [pc, #320]	; (80027c4 <_svfiprintf_r+0x1dc>)
 8002684:	f000 fa30 	bl	8002ae8 <memchr>
 8002688:	9b04      	ldr	r3, [sp, #16]
 800268a:	b9d0      	cbnz	r0, 80026c2 <_svfiprintf_r+0xda>
 800268c:	06d9      	lsls	r1, r3, #27
 800268e:	bf44      	itt	mi
 8002690:	2220      	movmi	r2, #32
 8002692:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002696:	071a      	lsls	r2, r3, #28
 8002698:	bf44      	itt	mi
 800269a:	222b      	movmi	r2, #43	; 0x2b
 800269c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80026a0:	782a      	ldrb	r2, [r5, #0]
 80026a2:	2a2a      	cmp	r2, #42	; 0x2a
 80026a4:	d015      	beq.n	80026d2 <_svfiprintf_r+0xea>
 80026a6:	462f      	mov	r7, r5
 80026a8:	2000      	movs	r0, #0
 80026aa:	250a      	movs	r5, #10
 80026ac:	9a07      	ldr	r2, [sp, #28]
 80026ae:	4639      	mov	r1, r7
 80026b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80026b4:	3b30      	subs	r3, #48	; 0x30
 80026b6:	2b09      	cmp	r3, #9
 80026b8:	d94d      	bls.n	8002756 <_svfiprintf_r+0x16e>
 80026ba:	b1b8      	cbz	r0, 80026ec <_svfiprintf_r+0x104>
 80026bc:	e00f      	b.n	80026de <_svfiprintf_r+0xf6>
 80026be:	462f      	mov	r7, r5
 80026c0:	e7b8      	b.n	8002634 <_svfiprintf_r+0x4c>
 80026c2:	4a40      	ldr	r2, [pc, #256]	; (80027c4 <_svfiprintf_r+0x1dc>)
 80026c4:	463d      	mov	r5, r7
 80026c6:	1a80      	subs	r0, r0, r2
 80026c8:	fa0b f000 	lsl.w	r0, fp, r0
 80026cc:	4318      	orrs	r0, r3
 80026ce:	9004      	str	r0, [sp, #16]
 80026d0:	e7d3      	b.n	800267a <_svfiprintf_r+0x92>
 80026d2:	9a03      	ldr	r2, [sp, #12]
 80026d4:	1d11      	adds	r1, r2, #4
 80026d6:	6812      	ldr	r2, [r2, #0]
 80026d8:	9103      	str	r1, [sp, #12]
 80026da:	2a00      	cmp	r2, #0
 80026dc:	db01      	blt.n	80026e2 <_svfiprintf_r+0xfa>
 80026de:	9207      	str	r2, [sp, #28]
 80026e0:	e004      	b.n	80026ec <_svfiprintf_r+0x104>
 80026e2:	4252      	negs	r2, r2
 80026e4:	f043 0302 	orr.w	r3, r3, #2
 80026e8:	9207      	str	r2, [sp, #28]
 80026ea:	9304      	str	r3, [sp, #16]
 80026ec:	783b      	ldrb	r3, [r7, #0]
 80026ee:	2b2e      	cmp	r3, #46	; 0x2e
 80026f0:	d10c      	bne.n	800270c <_svfiprintf_r+0x124>
 80026f2:	787b      	ldrb	r3, [r7, #1]
 80026f4:	2b2a      	cmp	r3, #42	; 0x2a
 80026f6:	d133      	bne.n	8002760 <_svfiprintf_r+0x178>
 80026f8:	9b03      	ldr	r3, [sp, #12]
 80026fa:	3702      	adds	r7, #2
 80026fc:	1d1a      	adds	r2, r3, #4
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	9203      	str	r2, [sp, #12]
 8002702:	2b00      	cmp	r3, #0
 8002704:	bfb8      	it	lt
 8002706:	f04f 33ff 	movlt.w	r3, #4294967295
 800270a:	9305      	str	r3, [sp, #20]
 800270c:	4d2e      	ldr	r5, [pc, #184]	; (80027c8 <_svfiprintf_r+0x1e0>)
 800270e:	2203      	movs	r2, #3
 8002710:	7839      	ldrb	r1, [r7, #0]
 8002712:	4628      	mov	r0, r5
 8002714:	f000 f9e8 	bl	8002ae8 <memchr>
 8002718:	b138      	cbz	r0, 800272a <_svfiprintf_r+0x142>
 800271a:	2340      	movs	r3, #64	; 0x40
 800271c:	1b40      	subs	r0, r0, r5
 800271e:	fa03 f000 	lsl.w	r0, r3, r0
 8002722:	9b04      	ldr	r3, [sp, #16]
 8002724:	3701      	adds	r7, #1
 8002726:	4303      	orrs	r3, r0
 8002728:	9304      	str	r3, [sp, #16]
 800272a:	7839      	ldrb	r1, [r7, #0]
 800272c:	2206      	movs	r2, #6
 800272e:	4827      	ldr	r0, [pc, #156]	; (80027cc <_svfiprintf_r+0x1e4>)
 8002730:	1c7e      	adds	r6, r7, #1
 8002732:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002736:	f000 f9d7 	bl	8002ae8 <memchr>
 800273a:	2800      	cmp	r0, #0
 800273c:	d038      	beq.n	80027b0 <_svfiprintf_r+0x1c8>
 800273e:	4b24      	ldr	r3, [pc, #144]	; (80027d0 <_svfiprintf_r+0x1e8>)
 8002740:	bb13      	cbnz	r3, 8002788 <_svfiprintf_r+0x1a0>
 8002742:	9b03      	ldr	r3, [sp, #12]
 8002744:	3307      	adds	r3, #7
 8002746:	f023 0307 	bic.w	r3, r3, #7
 800274a:	3308      	adds	r3, #8
 800274c:	9303      	str	r3, [sp, #12]
 800274e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002750:	444b      	add	r3, r9
 8002752:	9309      	str	r3, [sp, #36]	; 0x24
 8002754:	e76d      	b.n	8002632 <_svfiprintf_r+0x4a>
 8002756:	fb05 3202 	mla	r2, r5, r2, r3
 800275a:	2001      	movs	r0, #1
 800275c:	460f      	mov	r7, r1
 800275e:	e7a6      	b.n	80026ae <_svfiprintf_r+0xc6>
 8002760:	2300      	movs	r3, #0
 8002762:	250a      	movs	r5, #10
 8002764:	4619      	mov	r1, r3
 8002766:	3701      	adds	r7, #1
 8002768:	9305      	str	r3, [sp, #20]
 800276a:	4638      	mov	r0, r7
 800276c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002770:	3a30      	subs	r2, #48	; 0x30
 8002772:	2a09      	cmp	r2, #9
 8002774:	d903      	bls.n	800277e <_svfiprintf_r+0x196>
 8002776:	2b00      	cmp	r3, #0
 8002778:	d0c8      	beq.n	800270c <_svfiprintf_r+0x124>
 800277a:	9105      	str	r1, [sp, #20]
 800277c:	e7c6      	b.n	800270c <_svfiprintf_r+0x124>
 800277e:	fb05 2101 	mla	r1, r5, r1, r2
 8002782:	2301      	movs	r3, #1
 8002784:	4607      	mov	r7, r0
 8002786:	e7f0      	b.n	800276a <_svfiprintf_r+0x182>
 8002788:	ab03      	add	r3, sp, #12
 800278a:	9300      	str	r3, [sp, #0]
 800278c:	4622      	mov	r2, r4
 800278e:	4b11      	ldr	r3, [pc, #68]	; (80027d4 <_svfiprintf_r+0x1ec>)
 8002790:	a904      	add	r1, sp, #16
 8002792:	4640      	mov	r0, r8
 8002794:	f3af 8000 	nop.w
 8002798:	f1b0 3fff 	cmp.w	r0, #4294967295
 800279c:	4681      	mov	r9, r0
 800279e:	d1d6      	bne.n	800274e <_svfiprintf_r+0x166>
 80027a0:	89a3      	ldrh	r3, [r4, #12]
 80027a2:	065b      	lsls	r3, r3, #25
 80027a4:	f53f af35 	bmi.w	8002612 <_svfiprintf_r+0x2a>
 80027a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80027aa:	b01d      	add	sp, #116	; 0x74
 80027ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027b0:	ab03      	add	r3, sp, #12
 80027b2:	9300      	str	r3, [sp, #0]
 80027b4:	4622      	mov	r2, r4
 80027b6:	4b07      	ldr	r3, [pc, #28]	; (80027d4 <_svfiprintf_r+0x1ec>)
 80027b8:	a904      	add	r1, sp, #16
 80027ba:	4640      	mov	r0, r8
 80027bc:	f000 f882 	bl	80028c4 <_printf_i>
 80027c0:	e7ea      	b.n	8002798 <_svfiprintf_r+0x1b0>
 80027c2:	bf00      	nop
 80027c4:	08002fa0 	.word	0x08002fa0
 80027c8:	08002fa6 	.word	0x08002fa6
 80027cc:	08002faa 	.word	0x08002faa
 80027d0:	00000000 	.word	0x00000000
 80027d4:	08002535 	.word	0x08002535

080027d8 <_printf_common>:
 80027d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027dc:	4691      	mov	r9, r2
 80027de:	461f      	mov	r7, r3
 80027e0:	688a      	ldr	r2, [r1, #8]
 80027e2:	690b      	ldr	r3, [r1, #16]
 80027e4:	4606      	mov	r6, r0
 80027e6:	4293      	cmp	r3, r2
 80027e8:	bfb8      	it	lt
 80027ea:	4613      	movlt	r3, r2
 80027ec:	f8c9 3000 	str.w	r3, [r9]
 80027f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80027f4:	460c      	mov	r4, r1
 80027f6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80027fa:	b112      	cbz	r2, 8002802 <_printf_common+0x2a>
 80027fc:	3301      	adds	r3, #1
 80027fe:	f8c9 3000 	str.w	r3, [r9]
 8002802:	6823      	ldr	r3, [r4, #0]
 8002804:	0699      	lsls	r1, r3, #26
 8002806:	bf42      	ittt	mi
 8002808:	f8d9 3000 	ldrmi.w	r3, [r9]
 800280c:	3302      	addmi	r3, #2
 800280e:	f8c9 3000 	strmi.w	r3, [r9]
 8002812:	6825      	ldr	r5, [r4, #0]
 8002814:	f015 0506 	ands.w	r5, r5, #6
 8002818:	d107      	bne.n	800282a <_printf_common+0x52>
 800281a:	f104 0a19 	add.w	sl, r4, #25
 800281e:	68e3      	ldr	r3, [r4, #12]
 8002820:	f8d9 2000 	ldr.w	r2, [r9]
 8002824:	1a9b      	subs	r3, r3, r2
 8002826:	42ab      	cmp	r3, r5
 8002828:	dc29      	bgt.n	800287e <_printf_common+0xa6>
 800282a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800282e:	6822      	ldr	r2, [r4, #0]
 8002830:	3300      	adds	r3, #0
 8002832:	bf18      	it	ne
 8002834:	2301      	movne	r3, #1
 8002836:	0692      	lsls	r2, r2, #26
 8002838:	d42e      	bmi.n	8002898 <_printf_common+0xc0>
 800283a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800283e:	4639      	mov	r1, r7
 8002840:	4630      	mov	r0, r6
 8002842:	47c0      	blx	r8
 8002844:	3001      	adds	r0, #1
 8002846:	d021      	beq.n	800288c <_printf_common+0xb4>
 8002848:	6823      	ldr	r3, [r4, #0]
 800284a:	68e5      	ldr	r5, [r4, #12]
 800284c:	f003 0306 	and.w	r3, r3, #6
 8002850:	2b04      	cmp	r3, #4
 8002852:	bf18      	it	ne
 8002854:	2500      	movne	r5, #0
 8002856:	f8d9 2000 	ldr.w	r2, [r9]
 800285a:	f04f 0900 	mov.w	r9, #0
 800285e:	bf08      	it	eq
 8002860:	1aad      	subeq	r5, r5, r2
 8002862:	68a3      	ldr	r3, [r4, #8]
 8002864:	6922      	ldr	r2, [r4, #16]
 8002866:	bf08      	it	eq
 8002868:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800286c:	4293      	cmp	r3, r2
 800286e:	bfc4      	itt	gt
 8002870:	1a9b      	subgt	r3, r3, r2
 8002872:	18ed      	addgt	r5, r5, r3
 8002874:	341a      	adds	r4, #26
 8002876:	454d      	cmp	r5, r9
 8002878:	d11a      	bne.n	80028b0 <_printf_common+0xd8>
 800287a:	2000      	movs	r0, #0
 800287c:	e008      	b.n	8002890 <_printf_common+0xb8>
 800287e:	2301      	movs	r3, #1
 8002880:	4652      	mov	r2, sl
 8002882:	4639      	mov	r1, r7
 8002884:	4630      	mov	r0, r6
 8002886:	47c0      	blx	r8
 8002888:	3001      	adds	r0, #1
 800288a:	d103      	bne.n	8002894 <_printf_common+0xbc>
 800288c:	f04f 30ff 	mov.w	r0, #4294967295
 8002890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002894:	3501      	adds	r5, #1
 8002896:	e7c2      	b.n	800281e <_printf_common+0x46>
 8002898:	2030      	movs	r0, #48	; 0x30
 800289a:	18e1      	adds	r1, r4, r3
 800289c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80028a0:	1c5a      	adds	r2, r3, #1
 80028a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80028a6:	4422      	add	r2, r4
 80028a8:	3302      	adds	r3, #2
 80028aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80028ae:	e7c4      	b.n	800283a <_printf_common+0x62>
 80028b0:	2301      	movs	r3, #1
 80028b2:	4622      	mov	r2, r4
 80028b4:	4639      	mov	r1, r7
 80028b6:	4630      	mov	r0, r6
 80028b8:	47c0      	blx	r8
 80028ba:	3001      	adds	r0, #1
 80028bc:	d0e6      	beq.n	800288c <_printf_common+0xb4>
 80028be:	f109 0901 	add.w	r9, r9, #1
 80028c2:	e7d8      	b.n	8002876 <_printf_common+0x9e>

080028c4 <_printf_i>:
 80028c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80028c8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80028cc:	460c      	mov	r4, r1
 80028ce:	7e09      	ldrb	r1, [r1, #24]
 80028d0:	b085      	sub	sp, #20
 80028d2:	296e      	cmp	r1, #110	; 0x6e
 80028d4:	4617      	mov	r7, r2
 80028d6:	4606      	mov	r6, r0
 80028d8:	4698      	mov	r8, r3
 80028da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80028dc:	f000 80b3 	beq.w	8002a46 <_printf_i+0x182>
 80028e0:	d822      	bhi.n	8002928 <_printf_i+0x64>
 80028e2:	2963      	cmp	r1, #99	; 0x63
 80028e4:	d036      	beq.n	8002954 <_printf_i+0x90>
 80028e6:	d80a      	bhi.n	80028fe <_printf_i+0x3a>
 80028e8:	2900      	cmp	r1, #0
 80028ea:	f000 80b9 	beq.w	8002a60 <_printf_i+0x19c>
 80028ee:	2958      	cmp	r1, #88	; 0x58
 80028f0:	f000 8083 	beq.w	80029fa <_printf_i+0x136>
 80028f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80028f8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80028fc:	e032      	b.n	8002964 <_printf_i+0xa0>
 80028fe:	2964      	cmp	r1, #100	; 0x64
 8002900:	d001      	beq.n	8002906 <_printf_i+0x42>
 8002902:	2969      	cmp	r1, #105	; 0x69
 8002904:	d1f6      	bne.n	80028f4 <_printf_i+0x30>
 8002906:	6820      	ldr	r0, [r4, #0]
 8002908:	6813      	ldr	r3, [r2, #0]
 800290a:	0605      	lsls	r5, r0, #24
 800290c:	f103 0104 	add.w	r1, r3, #4
 8002910:	d52a      	bpl.n	8002968 <_printf_i+0xa4>
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	6011      	str	r1, [r2, #0]
 8002916:	2b00      	cmp	r3, #0
 8002918:	da03      	bge.n	8002922 <_printf_i+0x5e>
 800291a:	222d      	movs	r2, #45	; 0x2d
 800291c:	425b      	negs	r3, r3
 800291e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002922:	486f      	ldr	r0, [pc, #444]	; (8002ae0 <_printf_i+0x21c>)
 8002924:	220a      	movs	r2, #10
 8002926:	e039      	b.n	800299c <_printf_i+0xd8>
 8002928:	2973      	cmp	r1, #115	; 0x73
 800292a:	f000 809d 	beq.w	8002a68 <_printf_i+0x1a4>
 800292e:	d808      	bhi.n	8002942 <_printf_i+0x7e>
 8002930:	296f      	cmp	r1, #111	; 0x6f
 8002932:	d020      	beq.n	8002976 <_printf_i+0xb2>
 8002934:	2970      	cmp	r1, #112	; 0x70
 8002936:	d1dd      	bne.n	80028f4 <_printf_i+0x30>
 8002938:	6823      	ldr	r3, [r4, #0]
 800293a:	f043 0320 	orr.w	r3, r3, #32
 800293e:	6023      	str	r3, [r4, #0]
 8002940:	e003      	b.n	800294a <_printf_i+0x86>
 8002942:	2975      	cmp	r1, #117	; 0x75
 8002944:	d017      	beq.n	8002976 <_printf_i+0xb2>
 8002946:	2978      	cmp	r1, #120	; 0x78
 8002948:	d1d4      	bne.n	80028f4 <_printf_i+0x30>
 800294a:	2378      	movs	r3, #120	; 0x78
 800294c:	4865      	ldr	r0, [pc, #404]	; (8002ae4 <_printf_i+0x220>)
 800294e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002952:	e055      	b.n	8002a00 <_printf_i+0x13c>
 8002954:	6813      	ldr	r3, [r2, #0]
 8002956:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800295a:	1d19      	adds	r1, r3, #4
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	6011      	str	r1, [r2, #0]
 8002960:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002964:	2301      	movs	r3, #1
 8002966:	e08c      	b.n	8002a82 <_printf_i+0x1be>
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800296e:	6011      	str	r1, [r2, #0]
 8002970:	bf18      	it	ne
 8002972:	b21b      	sxthne	r3, r3
 8002974:	e7cf      	b.n	8002916 <_printf_i+0x52>
 8002976:	6813      	ldr	r3, [r2, #0]
 8002978:	6825      	ldr	r5, [r4, #0]
 800297a:	1d18      	adds	r0, r3, #4
 800297c:	6010      	str	r0, [r2, #0]
 800297e:	0628      	lsls	r0, r5, #24
 8002980:	d501      	bpl.n	8002986 <_printf_i+0xc2>
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	e002      	b.n	800298c <_printf_i+0xc8>
 8002986:	0668      	lsls	r0, r5, #25
 8002988:	d5fb      	bpl.n	8002982 <_printf_i+0xbe>
 800298a:	881b      	ldrh	r3, [r3, #0]
 800298c:	296f      	cmp	r1, #111	; 0x6f
 800298e:	bf14      	ite	ne
 8002990:	220a      	movne	r2, #10
 8002992:	2208      	moveq	r2, #8
 8002994:	4852      	ldr	r0, [pc, #328]	; (8002ae0 <_printf_i+0x21c>)
 8002996:	2100      	movs	r1, #0
 8002998:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800299c:	6865      	ldr	r5, [r4, #4]
 800299e:	2d00      	cmp	r5, #0
 80029a0:	60a5      	str	r5, [r4, #8]
 80029a2:	f2c0 8095 	blt.w	8002ad0 <_printf_i+0x20c>
 80029a6:	6821      	ldr	r1, [r4, #0]
 80029a8:	f021 0104 	bic.w	r1, r1, #4
 80029ac:	6021      	str	r1, [r4, #0]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d13d      	bne.n	8002a2e <_printf_i+0x16a>
 80029b2:	2d00      	cmp	r5, #0
 80029b4:	f040 808e 	bne.w	8002ad4 <_printf_i+0x210>
 80029b8:	4665      	mov	r5, ip
 80029ba:	2a08      	cmp	r2, #8
 80029bc:	d10b      	bne.n	80029d6 <_printf_i+0x112>
 80029be:	6823      	ldr	r3, [r4, #0]
 80029c0:	07db      	lsls	r3, r3, #31
 80029c2:	d508      	bpl.n	80029d6 <_printf_i+0x112>
 80029c4:	6923      	ldr	r3, [r4, #16]
 80029c6:	6862      	ldr	r2, [r4, #4]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	bfde      	ittt	le
 80029cc:	2330      	movle	r3, #48	; 0x30
 80029ce:	f805 3c01 	strble.w	r3, [r5, #-1]
 80029d2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80029d6:	ebac 0305 	sub.w	r3, ip, r5
 80029da:	6123      	str	r3, [r4, #16]
 80029dc:	f8cd 8000 	str.w	r8, [sp]
 80029e0:	463b      	mov	r3, r7
 80029e2:	aa03      	add	r2, sp, #12
 80029e4:	4621      	mov	r1, r4
 80029e6:	4630      	mov	r0, r6
 80029e8:	f7ff fef6 	bl	80027d8 <_printf_common>
 80029ec:	3001      	adds	r0, #1
 80029ee:	d14d      	bne.n	8002a8c <_printf_i+0x1c8>
 80029f0:	f04f 30ff 	mov.w	r0, #4294967295
 80029f4:	b005      	add	sp, #20
 80029f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80029fa:	4839      	ldr	r0, [pc, #228]	; (8002ae0 <_printf_i+0x21c>)
 80029fc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002a00:	6813      	ldr	r3, [r2, #0]
 8002a02:	6821      	ldr	r1, [r4, #0]
 8002a04:	1d1d      	adds	r5, r3, #4
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6015      	str	r5, [r2, #0]
 8002a0a:	060a      	lsls	r2, r1, #24
 8002a0c:	d50b      	bpl.n	8002a26 <_printf_i+0x162>
 8002a0e:	07ca      	lsls	r2, r1, #31
 8002a10:	bf44      	itt	mi
 8002a12:	f041 0120 	orrmi.w	r1, r1, #32
 8002a16:	6021      	strmi	r1, [r4, #0]
 8002a18:	b91b      	cbnz	r3, 8002a22 <_printf_i+0x15e>
 8002a1a:	6822      	ldr	r2, [r4, #0]
 8002a1c:	f022 0220 	bic.w	r2, r2, #32
 8002a20:	6022      	str	r2, [r4, #0]
 8002a22:	2210      	movs	r2, #16
 8002a24:	e7b7      	b.n	8002996 <_printf_i+0xd2>
 8002a26:	064d      	lsls	r5, r1, #25
 8002a28:	bf48      	it	mi
 8002a2a:	b29b      	uxthmi	r3, r3
 8002a2c:	e7ef      	b.n	8002a0e <_printf_i+0x14a>
 8002a2e:	4665      	mov	r5, ip
 8002a30:	fbb3 f1f2 	udiv	r1, r3, r2
 8002a34:	fb02 3311 	mls	r3, r2, r1, r3
 8002a38:	5cc3      	ldrb	r3, [r0, r3]
 8002a3a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002a3e:	460b      	mov	r3, r1
 8002a40:	2900      	cmp	r1, #0
 8002a42:	d1f5      	bne.n	8002a30 <_printf_i+0x16c>
 8002a44:	e7b9      	b.n	80029ba <_printf_i+0xf6>
 8002a46:	6813      	ldr	r3, [r2, #0]
 8002a48:	6825      	ldr	r5, [r4, #0]
 8002a4a:	1d18      	adds	r0, r3, #4
 8002a4c:	6961      	ldr	r1, [r4, #20]
 8002a4e:	6010      	str	r0, [r2, #0]
 8002a50:	0628      	lsls	r0, r5, #24
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	d501      	bpl.n	8002a5a <_printf_i+0x196>
 8002a56:	6019      	str	r1, [r3, #0]
 8002a58:	e002      	b.n	8002a60 <_printf_i+0x19c>
 8002a5a:	066a      	lsls	r2, r5, #25
 8002a5c:	d5fb      	bpl.n	8002a56 <_printf_i+0x192>
 8002a5e:	8019      	strh	r1, [r3, #0]
 8002a60:	2300      	movs	r3, #0
 8002a62:	4665      	mov	r5, ip
 8002a64:	6123      	str	r3, [r4, #16]
 8002a66:	e7b9      	b.n	80029dc <_printf_i+0x118>
 8002a68:	6813      	ldr	r3, [r2, #0]
 8002a6a:	1d19      	adds	r1, r3, #4
 8002a6c:	6011      	str	r1, [r2, #0]
 8002a6e:	681d      	ldr	r5, [r3, #0]
 8002a70:	6862      	ldr	r2, [r4, #4]
 8002a72:	2100      	movs	r1, #0
 8002a74:	4628      	mov	r0, r5
 8002a76:	f000 f837 	bl	8002ae8 <memchr>
 8002a7a:	b108      	cbz	r0, 8002a80 <_printf_i+0x1bc>
 8002a7c:	1b40      	subs	r0, r0, r5
 8002a7e:	6060      	str	r0, [r4, #4]
 8002a80:	6863      	ldr	r3, [r4, #4]
 8002a82:	6123      	str	r3, [r4, #16]
 8002a84:	2300      	movs	r3, #0
 8002a86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a8a:	e7a7      	b.n	80029dc <_printf_i+0x118>
 8002a8c:	6923      	ldr	r3, [r4, #16]
 8002a8e:	462a      	mov	r2, r5
 8002a90:	4639      	mov	r1, r7
 8002a92:	4630      	mov	r0, r6
 8002a94:	47c0      	blx	r8
 8002a96:	3001      	adds	r0, #1
 8002a98:	d0aa      	beq.n	80029f0 <_printf_i+0x12c>
 8002a9a:	6823      	ldr	r3, [r4, #0]
 8002a9c:	079b      	lsls	r3, r3, #30
 8002a9e:	d413      	bmi.n	8002ac8 <_printf_i+0x204>
 8002aa0:	68e0      	ldr	r0, [r4, #12]
 8002aa2:	9b03      	ldr	r3, [sp, #12]
 8002aa4:	4298      	cmp	r0, r3
 8002aa6:	bfb8      	it	lt
 8002aa8:	4618      	movlt	r0, r3
 8002aaa:	e7a3      	b.n	80029f4 <_printf_i+0x130>
 8002aac:	2301      	movs	r3, #1
 8002aae:	464a      	mov	r2, r9
 8002ab0:	4639      	mov	r1, r7
 8002ab2:	4630      	mov	r0, r6
 8002ab4:	47c0      	blx	r8
 8002ab6:	3001      	adds	r0, #1
 8002ab8:	d09a      	beq.n	80029f0 <_printf_i+0x12c>
 8002aba:	3501      	adds	r5, #1
 8002abc:	68e3      	ldr	r3, [r4, #12]
 8002abe:	9a03      	ldr	r2, [sp, #12]
 8002ac0:	1a9b      	subs	r3, r3, r2
 8002ac2:	42ab      	cmp	r3, r5
 8002ac4:	dcf2      	bgt.n	8002aac <_printf_i+0x1e8>
 8002ac6:	e7eb      	b.n	8002aa0 <_printf_i+0x1dc>
 8002ac8:	2500      	movs	r5, #0
 8002aca:	f104 0919 	add.w	r9, r4, #25
 8002ace:	e7f5      	b.n	8002abc <_printf_i+0x1f8>
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d1ac      	bne.n	8002a2e <_printf_i+0x16a>
 8002ad4:	7803      	ldrb	r3, [r0, #0]
 8002ad6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ada:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ade:	e76c      	b.n	80029ba <_printf_i+0xf6>
 8002ae0:	08002fb1 	.word	0x08002fb1
 8002ae4:	08002fc2 	.word	0x08002fc2

08002ae8 <memchr>:
 8002ae8:	b510      	push	{r4, lr}
 8002aea:	b2c9      	uxtb	r1, r1
 8002aec:	4402      	add	r2, r0
 8002aee:	4290      	cmp	r0, r2
 8002af0:	4603      	mov	r3, r0
 8002af2:	d101      	bne.n	8002af8 <memchr+0x10>
 8002af4:	2300      	movs	r3, #0
 8002af6:	e003      	b.n	8002b00 <memchr+0x18>
 8002af8:	781c      	ldrb	r4, [r3, #0]
 8002afa:	3001      	adds	r0, #1
 8002afc:	428c      	cmp	r4, r1
 8002afe:	d1f6      	bne.n	8002aee <memchr+0x6>
 8002b00:	4618      	mov	r0, r3
 8002b02:	bd10      	pop	{r4, pc}

08002b04 <memcpy>:
 8002b04:	b510      	push	{r4, lr}
 8002b06:	1e43      	subs	r3, r0, #1
 8002b08:	440a      	add	r2, r1
 8002b0a:	4291      	cmp	r1, r2
 8002b0c:	d100      	bne.n	8002b10 <memcpy+0xc>
 8002b0e:	bd10      	pop	{r4, pc}
 8002b10:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002b14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002b18:	e7f7      	b.n	8002b0a <memcpy+0x6>

08002b1a <memmove>:
 8002b1a:	4288      	cmp	r0, r1
 8002b1c:	b510      	push	{r4, lr}
 8002b1e:	eb01 0302 	add.w	r3, r1, r2
 8002b22:	d807      	bhi.n	8002b34 <memmove+0x1a>
 8002b24:	1e42      	subs	r2, r0, #1
 8002b26:	4299      	cmp	r1, r3
 8002b28:	d00a      	beq.n	8002b40 <memmove+0x26>
 8002b2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002b2e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002b32:	e7f8      	b.n	8002b26 <memmove+0xc>
 8002b34:	4283      	cmp	r3, r0
 8002b36:	d9f5      	bls.n	8002b24 <memmove+0xa>
 8002b38:	1881      	adds	r1, r0, r2
 8002b3a:	1ad2      	subs	r2, r2, r3
 8002b3c:	42d3      	cmn	r3, r2
 8002b3e:	d100      	bne.n	8002b42 <memmove+0x28>
 8002b40:	bd10      	pop	{r4, pc}
 8002b42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002b46:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002b4a:	e7f7      	b.n	8002b3c <memmove+0x22>

08002b4c <_free_r>:
 8002b4c:	b538      	push	{r3, r4, r5, lr}
 8002b4e:	4605      	mov	r5, r0
 8002b50:	2900      	cmp	r1, #0
 8002b52:	d043      	beq.n	8002bdc <_free_r+0x90>
 8002b54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b58:	1f0c      	subs	r4, r1, #4
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	bfb8      	it	lt
 8002b5e:	18e4      	addlt	r4, r4, r3
 8002b60:	f000 f8d0 	bl	8002d04 <__malloc_lock>
 8002b64:	4a1e      	ldr	r2, [pc, #120]	; (8002be0 <_free_r+0x94>)
 8002b66:	6813      	ldr	r3, [r2, #0]
 8002b68:	4610      	mov	r0, r2
 8002b6a:	b933      	cbnz	r3, 8002b7a <_free_r+0x2e>
 8002b6c:	6063      	str	r3, [r4, #4]
 8002b6e:	6014      	str	r4, [r2, #0]
 8002b70:	4628      	mov	r0, r5
 8002b72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b76:	f000 b8c6 	b.w	8002d06 <__malloc_unlock>
 8002b7a:	42a3      	cmp	r3, r4
 8002b7c:	d90b      	bls.n	8002b96 <_free_r+0x4a>
 8002b7e:	6821      	ldr	r1, [r4, #0]
 8002b80:	1862      	adds	r2, r4, r1
 8002b82:	4293      	cmp	r3, r2
 8002b84:	bf01      	itttt	eq
 8002b86:	681a      	ldreq	r2, [r3, #0]
 8002b88:	685b      	ldreq	r3, [r3, #4]
 8002b8a:	1852      	addeq	r2, r2, r1
 8002b8c:	6022      	streq	r2, [r4, #0]
 8002b8e:	6063      	str	r3, [r4, #4]
 8002b90:	6004      	str	r4, [r0, #0]
 8002b92:	e7ed      	b.n	8002b70 <_free_r+0x24>
 8002b94:	4613      	mov	r3, r2
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	b10a      	cbz	r2, 8002b9e <_free_r+0x52>
 8002b9a:	42a2      	cmp	r2, r4
 8002b9c:	d9fa      	bls.n	8002b94 <_free_r+0x48>
 8002b9e:	6819      	ldr	r1, [r3, #0]
 8002ba0:	1858      	adds	r0, r3, r1
 8002ba2:	42a0      	cmp	r0, r4
 8002ba4:	d10b      	bne.n	8002bbe <_free_r+0x72>
 8002ba6:	6820      	ldr	r0, [r4, #0]
 8002ba8:	4401      	add	r1, r0
 8002baa:	1858      	adds	r0, r3, r1
 8002bac:	4282      	cmp	r2, r0
 8002bae:	6019      	str	r1, [r3, #0]
 8002bb0:	d1de      	bne.n	8002b70 <_free_r+0x24>
 8002bb2:	6810      	ldr	r0, [r2, #0]
 8002bb4:	6852      	ldr	r2, [r2, #4]
 8002bb6:	4401      	add	r1, r0
 8002bb8:	6019      	str	r1, [r3, #0]
 8002bba:	605a      	str	r2, [r3, #4]
 8002bbc:	e7d8      	b.n	8002b70 <_free_r+0x24>
 8002bbe:	d902      	bls.n	8002bc6 <_free_r+0x7a>
 8002bc0:	230c      	movs	r3, #12
 8002bc2:	602b      	str	r3, [r5, #0]
 8002bc4:	e7d4      	b.n	8002b70 <_free_r+0x24>
 8002bc6:	6820      	ldr	r0, [r4, #0]
 8002bc8:	1821      	adds	r1, r4, r0
 8002bca:	428a      	cmp	r2, r1
 8002bcc:	bf01      	itttt	eq
 8002bce:	6811      	ldreq	r1, [r2, #0]
 8002bd0:	6852      	ldreq	r2, [r2, #4]
 8002bd2:	1809      	addeq	r1, r1, r0
 8002bd4:	6021      	streq	r1, [r4, #0]
 8002bd6:	6062      	str	r2, [r4, #4]
 8002bd8:	605c      	str	r4, [r3, #4]
 8002bda:	e7c9      	b.n	8002b70 <_free_r+0x24>
 8002bdc:	bd38      	pop	{r3, r4, r5, pc}
 8002bde:	bf00      	nop
 8002be0:	20000090 	.word	0x20000090

08002be4 <_malloc_r>:
 8002be4:	b570      	push	{r4, r5, r6, lr}
 8002be6:	1ccd      	adds	r5, r1, #3
 8002be8:	f025 0503 	bic.w	r5, r5, #3
 8002bec:	3508      	adds	r5, #8
 8002bee:	2d0c      	cmp	r5, #12
 8002bf0:	bf38      	it	cc
 8002bf2:	250c      	movcc	r5, #12
 8002bf4:	2d00      	cmp	r5, #0
 8002bf6:	4606      	mov	r6, r0
 8002bf8:	db01      	blt.n	8002bfe <_malloc_r+0x1a>
 8002bfa:	42a9      	cmp	r1, r5
 8002bfc:	d903      	bls.n	8002c06 <_malloc_r+0x22>
 8002bfe:	230c      	movs	r3, #12
 8002c00:	6033      	str	r3, [r6, #0]
 8002c02:	2000      	movs	r0, #0
 8002c04:	bd70      	pop	{r4, r5, r6, pc}
 8002c06:	f000 f87d 	bl	8002d04 <__malloc_lock>
 8002c0a:	4a21      	ldr	r2, [pc, #132]	; (8002c90 <_malloc_r+0xac>)
 8002c0c:	6814      	ldr	r4, [r2, #0]
 8002c0e:	4621      	mov	r1, r4
 8002c10:	b991      	cbnz	r1, 8002c38 <_malloc_r+0x54>
 8002c12:	4c20      	ldr	r4, [pc, #128]	; (8002c94 <_malloc_r+0xb0>)
 8002c14:	6823      	ldr	r3, [r4, #0]
 8002c16:	b91b      	cbnz	r3, 8002c20 <_malloc_r+0x3c>
 8002c18:	4630      	mov	r0, r6
 8002c1a:	f000 f863 	bl	8002ce4 <_sbrk_r>
 8002c1e:	6020      	str	r0, [r4, #0]
 8002c20:	4629      	mov	r1, r5
 8002c22:	4630      	mov	r0, r6
 8002c24:	f000 f85e 	bl	8002ce4 <_sbrk_r>
 8002c28:	1c43      	adds	r3, r0, #1
 8002c2a:	d124      	bne.n	8002c76 <_malloc_r+0x92>
 8002c2c:	230c      	movs	r3, #12
 8002c2e:	4630      	mov	r0, r6
 8002c30:	6033      	str	r3, [r6, #0]
 8002c32:	f000 f868 	bl	8002d06 <__malloc_unlock>
 8002c36:	e7e4      	b.n	8002c02 <_malloc_r+0x1e>
 8002c38:	680b      	ldr	r3, [r1, #0]
 8002c3a:	1b5b      	subs	r3, r3, r5
 8002c3c:	d418      	bmi.n	8002c70 <_malloc_r+0x8c>
 8002c3e:	2b0b      	cmp	r3, #11
 8002c40:	d90f      	bls.n	8002c62 <_malloc_r+0x7e>
 8002c42:	600b      	str	r3, [r1, #0]
 8002c44:	18cc      	adds	r4, r1, r3
 8002c46:	50cd      	str	r5, [r1, r3]
 8002c48:	4630      	mov	r0, r6
 8002c4a:	f000 f85c 	bl	8002d06 <__malloc_unlock>
 8002c4e:	f104 000b 	add.w	r0, r4, #11
 8002c52:	1d23      	adds	r3, r4, #4
 8002c54:	f020 0007 	bic.w	r0, r0, #7
 8002c58:	1ac3      	subs	r3, r0, r3
 8002c5a:	d0d3      	beq.n	8002c04 <_malloc_r+0x20>
 8002c5c:	425a      	negs	r2, r3
 8002c5e:	50e2      	str	r2, [r4, r3]
 8002c60:	e7d0      	b.n	8002c04 <_malloc_r+0x20>
 8002c62:	684b      	ldr	r3, [r1, #4]
 8002c64:	428c      	cmp	r4, r1
 8002c66:	bf16      	itet	ne
 8002c68:	6063      	strne	r3, [r4, #4]
 8002c6a:	6013      	streq	r3, [r2, #0]
 8002c6c:	460c      	movne	r4, r1
 8002c6e:	e7eb      	b.n	8002c48 <_malloc_r+0x64>
 8002c70:	460c      	mov	r4, r1
 8002c72:	6849      	ldr	r1, [r1, #4]
 8002c74:	e7cc      	b.n	8002c10 <_malloc_r+0x2c>
 8002c76:	1cc4      	adds	r4, r0, #3
 8002c78:	f024 0403 	bic.w	r4, r4, #3
 8002c7c:	42a0      	cmp	r0, r4
 8002c7e:	d005      	beq.n	8002c8c <_malloc_r+0xa8>
 8002c80:	1a21      	subs	r1, r4, r0
 8002c82:	4630      	mov	r0, r6
 8002c84:	f000 f82e 	bl	8002ce4 <_sbrk_r>
 8002c88:	3001      	adds	r0, #1
 8002c8a:	d0cf      	beq.n	8002c2c <_malloc_r+0x48>
 8002c8c:	6025      	str	r5, [r4, #0]
 8002c8e:	e7db      	b.n	8002c48 <_malloc_r+0x64>
 8002c90:	20000090 	.word	0x20000090
 8002c94:	20000094 	.word	0x20000094

08002c98 <_realloc_r>:
 8002c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c9a:	4607      	mov	r7, r0
 8002c9c:	4614      	mov	r4, r2
 8002c9e:	460e      	mov	r6, r1
 8002ca0:	b921      	cbnz	r1, 8002cac <_realloc_r+0x14>
 8002ca2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002ca6:	4611      	mov	r1, r2
 8002ca8:	f7ff bf9c 	b.w	8002be4 <_malloc_r>
 8002cac:	b922      	cbnz	r2, 8002cb8 <_realloc_r+0x20>
 8002cae:	f7ff ff4d 	bl	8002b4c <_free_r>
 8002cb2:	4625      	mov	r5, r4
 8002cb4:	4628      	mov	r0, r5
 8002cb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002cb8:	f000 f826 	bl	8002d08 <_malloc_usable_size_r>
 8002cbc:	42a0      	cmp	r0, r4
 8002cbe:	d20f      	bcs.n	8002ce0 <_realloc_r+0x48>
 8002cc0:	4621      	mov	r1, r4
 8002cc2:	4638      	mov	r0, r7
 8002cc4:	f7ff ff8e 	bl	8002be4 <_malloc_r>
 8002cc8:	4605      	mov	r5, r0
 8002cca:	2800      	cmp	r0, #0
 8002ccc:	d0f2      	beq.n	8002cb4 <_realloc_r+0x1c>
 8002cce:	4631      	mov	r1, r6
 8002cd0:	4622      	mov	r2, r4
 8002cd2:	f7ff ff17 	bl	8002b04 <memcpy>
 8002cd6:	4631      	mov	r1, r6
 8002cd8:	4638      	mov	r0, r7
 8002cda:	f7ff ff37 	bl	8002b4c <_free_r>
 8002cde:	e7e9      	b.n	8002cb4 <_realloc_r+0x1c>
 8002ce0:	4635      	mov	r5, r6
 8002ce2:	e7e7      	b.n	8002cb4 <_realloc_r+0x1c>

08002ce4 <_sbrk_r>:
 8002ce4:	b538      	push	{r3, r4, r5, lr}
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	4c05      	ldr	r4, [pc, #20]	; (8002d00 <_sbrk_r+0x1c>)
 8002cea:	4605      	mov	r5, r0
 8002cec:	4608      	mov	r0, r1
 8002cee:	6023      	str	r3, [r4, #0]
 8002cf0:	f7fd fcc6 	bl	8000680 <_sbrk>
 8002cf4:	1c43      	adds	r3, r0, #1
 8002cf6:	d102      	bne.n	8002cfe <_sbrk_r+0x1a>
 8002cf8:	6823      	ldr	r3, [r4, #0]
 8002cfa:	b103      	cbz	r3, 8002cfe <_sbrk_r+0x1a>
 8002cfc:	602b      	str	r3, [r5, #0]
 8002cfe:	bd38      	pop	{r3, r4, r5, pc}
 8002d00:	20000100 	.word	0x20000100

08002d04 <__malloc_lock>:
 8002d04:	4770      	bx	lr

08002d06 <__malloc_unlock>:
 8002d06:	4770      	bx	lr

08002d08 <_malloc_usable_size_r>:
 8002d08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d0c:	1f18      	subs	r0, r3, #4
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	bfbc      	itt	lt
 8002d12:	580b      	ldrlt	r3, [r1, r0]
 8002d14:	18c0      	addlt	r0, r0, r3
 8002d16:	4770      	bx	lr

08002d18 <_init>:
 8002d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d1a:	bf00      	nop
 8002d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d1e:	bc08      	pop	{r3}
 8002d20:	469e      	mov	lr, r3
 8002d22:	4770      	bx	lr

08002d24 <_fini>:
 8002d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d26:	bf00      	nop
 8002d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d2a:	bc08      	pop	{r3}
 8002d2c:	469e      	mov	lr, r3
 8002d2e:	4770      	bx	lr
